{"version":3,"sources":["services/FormService.js","logo.svg","components/Header.js","services/ResumeService.js","components/addResume/resumeTemplate/allTemplates/professional/ProfessionalTemp.js","components/addResume/resumeTemplate/allTemplates/modern/ModernTemp.js","components/addResume/resumeTemplate/ResumePreview.js","components/addResume/resumeTemplate/ResumeTemplate.js","services/FormFieldsService.js","components/addResume/EduTemp.js","components/addResume/ProjTemp.js","components/addResume/LangTemp.js","components/addResume/CertTemp.js","components/addResume/AddResume.js","components/ListResume.js","pages/ResumeFactory.js","App.js","reportWebVitals.js","index.js"],"names":["resumeFormFields","setResumeFormFields","Header","styles","main","borderBottom","title","fontSize","marginLeft","style","ResumeService","getResumes","resumes","localStorage","getItem","JSON","parse","getResumeById","id","filter","r","saveResume","data","Date","now","push","setItem","stringify","editResume","map","dltResume","uploadResume","Array","isArray","ProfessionalTemp","props","transformDate","dtStr","format","date","d","getDate","m","getMonth","y","getFullYear","formatMap","Button","className","size","variant","color","onClick","window","print","icon","faPrint","resumeData","general","name","class","location","phone","email","linkedIn","replace","experiences","exp","startDate","current","endDate","company","roles","split","role","educations","edu","i","eduHtml","school","slice","join","degree","technicalSkills","ratings","rating","skill","skills","ModernTemp","useState","professionalSkills","languages","projects","sectionPosition","setSectionPosition","changeSectionPosition","sectionName","position","copy","about","faCircleArrowRight","faAngleRight","proj","url","l","desc","tech","src","image","faPhone","faEnvelope","faMapMarker","faCircle","faCircleReg","lang","ResumePreview","addResumeForm","getValue","selectedResumeTemp","Transition","React","forwardRef","ref","Slide","direction","ResumeTemplate","resumeEditData","onAdd","onDlt","handleClose","setShowPreview","_resumeTemplates","showPreview","setTempleteInResumeObj","console","log","copyResumeFormFields","setState","template","useEffect","e","Card","CardContent","Grid","container","spacing","rt","idx","item","xs","md","sx","alt","loading","RadioButtonChecked","RadioButtonUnchecked","Dialog","fullScreen","open","onClose","TransitionComponent","IconButton","edge","validateInput","value","validators","errors","validator","error","undefined","includes","re","RegExp","pattern","test","errorMessage","generalFieldObj","dirty","FormService","init","rff","srff","isFormValid","formName","valid","formCopy","iterate","formObj","v","Object","keys","length","setValue","objName","dataObj","dataValue","disabled","getGeneralFieldObj","gfo","getDateString","onFormFieldChange","formNames","inputValue","target","type","checked","formField","getState","required","fieldsMinCount","certificates","fields","resumeName","fill","employmentType","field","grade","org","cid","getFields","FormFieldService","EduTemp","TextField","label","onChange","onBlur","helperText","fullWidth","placeholder","width","Tooltip","placement","Delete","ProjTemp","p","Checkbox","inputProps","setTimeout","multiline","rows","LangTemp","ts","tsr","Slider","defaultValue","valueLabelDisplay","marks","min","max","CertTemp","cert","AddResume","addResumeCont","background","boxSizing","padding","sectionsCont","marginTop","paddingLeft","boxShadow","clipPath","sectionsRCont","sectionsContLiUl","listStyleType","sectionsContLi","textTransform","cursor","form","height","overflowY","addDltBtn","paddingTop","skillRowMargin","marginBottom","expRowMargin","paddingBottom","submitBtn","marginRight","float","tabList","templates","tabs","activeSection","setActiveSection","resumeFormFieldsObj","fieldsmapObj","tsList","index","splice","onFormSubmit","payload","closeForm","errorTab","tabErrors","tab","indexOf","ps","psr","experience","FormControl","InputLabel","Select","labelId","MenuItem","InputLabelProps","shrink","ListResume","addResume","listResume","listRowFirst","fontWeight","listRow","listCol","showAddResume","setShowAddResume","setResumeEditData","fetchResumes","Add","document","getElementById","click","Upload","preventDefault","reader","FileReader","readAsText","files","onload","text","result","onerror","uploadResumme","Edit","confirm","deleteResume","blob","Blob","link","createElement","download","href","URL","createObjectURL","dataset","downloadurl","evt","MouseEvent","view","bubbles","cancelable","dispatchEvent","remove","downloadResume","Download","changeTemplate","Preview","ResumeFactory","setResumes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c828ab3d.chunk.js","sourcesContent":["let resumeFormFields, setResumeFormFields;\n\n/* validation - start */\nconst validateInput = (value, validators) => {\n  let errors = [];\n\n  validators?.map((validator) => {\n    let error;\n    switch (validator.name) {\n      case \"required\":\n        error = [\"\", null, undefined].includes(value);\n        break;\n\n      case \"url\":\n      case \"email\":\n        const re = new RegExp(validator.pattern, \"i\");\n        error = ![\"\", null, undefined].includes(value) ? !re.test(value) : \"\";\n        break;\n    }\n    if (error) errors.push(validator.errorMessage);\n  });\n  return errors;\n};\n\nconst validators = {\n  required: { name: \"required\", errorMessage: \"Required\" },\n  email: {\n    name: \"email\",\n    pattern:\n      \"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])+\",\n    errorMessage: \"Invalid email\",\n  },\n  url: {\n    name: \"url\",\n    pattern:\n      \"(https?://(?:www.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9].[^s]{2,}|www.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9].[^s]{2,}|https?://(?:www.|(?!www))[a-zA-Z0-9]+.[^s]{2,}|www.[a-zA-Z0-9]+.[^s]{2,})\",\n    errorMessage: \"Invalid Url\",\n  },\n};\n/* validation - end */\n\n/* form operations - start */\n\n\n\nconst getDateString = (dtStr) => {\n  const date = (dtStr && dtStr !== \"undefined\") ? new Date(dtStr) : new Date();\n  const d = date.getDate(),\n    m = date.getMonth() + 1,\n    y = date.getFullYear();\n  const dateString =\n    \"\" + y + \"-\" + (m <= 9 ? \"0\" + m : m) + \"-\" + (d <= 9 ? \"0\" + d : d);\n  return dateString;\n}\n\nconst generalFieldObj = {\n  value: \"\",\n  dirty: false,\n  validators: [],\n  errors: [],\n};\nconst getGeneralFieldObj = (validators, value) => {\n  let gfo = JSON.parse(JSON.stringify(generalFieldObj));\n  gfo.value = value ?  (typeof(value) == \"string\" && value.includes(\"dateString\")) ? getDateString(value.split(\"|\")[1]) : value : \"\";\n  gfo.validators = validators;\n  return gfo;\n};\n\nconst onFormFieldChange = (e, formNames, disabled) => {\n  const inputValue = e.target\n    ? e.target.type === \"checkbox\"\n      ? e.target.checked\n      : e.target.value\n    : e;\n  let copyResumeFormFields = JSON.parse(JSON.stringify(resumeFormFields));\n  let formField = copyResumeFormFields;\n  for (let fn of formNames) {\n    formField = formField[fn];\n  }\n\n  if(disabled === undefined){\n    // console.log(\"formNames ::\", formNames);\n    // console.log(\"formField ::\", formField);\n\n    const errors = validateInput(inputValue, formField.validators);\n    formField.value = inputValue;\n    \"dirty\" in formField ? (formField.dirty = true) : delete formField.dirty;\n    formField.errors = errors;\n  }\n\n  formField.disabled = disabled;\n\n  //console.log(\"onGeneralFieldChange :: formField ::\", formField);\n  //console.log(\"onGeneralFieldChange :: copyResumeFormFields ::\", copyResumeFormFields);\n  //console.log(\"--------------------------------------------------------\");\n  setResumeFormFields(copyResumeFormFields);\n};\n\nconst init = (rff, srff) => {\n  resumeFormFields = rff;\n  setResumeFormFields = srff;\n}\nconst setState = (data) => {\n  setResumeFormFields(data);\n}\n\nconst getState = () => {\n  return resumeFormFields;\n}\n/* form operations - end */\n\nconst isFormValid = (formName) => {\n  let valid =  true;\n  let formCopy = JSON.parse(JSON.stringify(resumeFormFields));\n\n  let iterate = (formObj) => {\n    for(let i in formObj){\n      let v = formObj[i];\n      if(typeof formObj[i] === \"object\" && Object.keys(formObj[i]).includes(\"dirty\")){\n        //formObj[i] = formObj[i].value;\n        const errors = validateInput(formObj[i].value, formObj[i].validators);\n        formObj[i].errors = errors;\n        if(errors.length){\n          valid = false;\n        }\n      } else if(typeof v === \"object\") {\n        iterate(v);\n      } else {\n        console.log(\"v :: \", v);\n      }\n    }\n  }\n  iterate(formCopy[formName] || formCopy);\n  // console.log(\"isFormValid :: formName ::\", formName);\n  // console.log(\"isFormValid :: formCopy ::\", JSON.parse(JSON.stringify(formCopy)));\n  setState(formCopy);\n  return valid;\n};\n\nconst getValue = () => {\n  console.log(\"getValue :: resumeFormFields ::\", resumeFormFields);\n  let formCopy = JSON.parse(JSON.stringify(resumeFormFields));\n  let iterate = (formObj) => {\n    for(let i in formObj){\n      let v = formObj[i];\n      if(typeof formObj[i] === \"object\" && Object.keys(formObj[i]).includes(\"dirty\")){\n        formObj[i] = formObj[i].value;\n      } else if(typeof v === \"object\") {\n        iterate(v);\n      } else {\n        console.log(\"v :: \", v);\n      }\n    }\n  }\n  iterate(formCopy);\n  return formCopy;\n}\n\nconst setValue = (resumeEditData, objName) => {\n  console.log(\"setValue :: resumeFormFields ::\", resumeFormFields);\n  let formCopy = JSON.parse(JSON.stringify(resumeFormFields));\n  let dataCopy = JSON.parse(JSON.stringify(resumeEditData));\n  let iterate = (formObj, dataObj) => {\n    for(let i in formObj){\n      let v = formObj[i];\n      let dataValue = dataObj[i];\n      if(dataValue){\n        if(typeof formObj[i] === \"object\" && Object.keys(formObj[i]).includes(\"dirty\")){\n          //formObj[i] = formObj[i].value;\n          if(formObj['current'] && i === \"endDate\") formObj[i].disabled = true;\n          formObj[i].value = dataObj[i];\n        } else if(typeof v === \"object\") {\n          iterate(v, dataValue);\n        } else {\n          console.log(\"v :: \", v);\n          console.log(\"dataValue :: \", dataValue);\n        }\n      }\n    }\n  }\n  iterate(formCopy, dataCopy);\n  console.log(\"setValue :: formCopy ::\", formCopy);\n\n  setState(formCopy);\n  //return formCopy;\n}\n\nexport const FormService = {\n  init,\n  isFormValid,\n  getValue,\n  setValue,\n  getGeneralFieldObj,\n  onFormFieldChange,\n  setState,\n  getState,\n  validators,\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\nexport const Header = () => {\n    const styles = {\n        main: {\n            borderBottom: \"2px solid #eee\"\n        },\n        title: {\n            fontSize: \"25px\",\n            marginLeft: \"10px\"\n        }\n    }\n    return (\n        <header style={styles.main}>\n            <h1 style={styles.title}>Resume Factory</h1>  \n            \n        </header>\n    )\n}","\nexport const ResumeService = (() => {\n    \n    const getResumes = () => {\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        return resumes;\n    }\n    \n    const getResumeById = (id) => {\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        return resumes.filter((r)=> {return r.id = id;});\n    }\n\n    const saveResume = (data) => {\n        data['id'] = Date.now();\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        resumes.push(data);\n        localStorage.setItem('resumes', JSON.stringify(resumes));\n        return data;\n    }\n\n    const editResume = (id, data) => {\n        data.id = id;\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        resumes = resumes.map((r)=> {\n            if(id == r.id){\n                r = data;\n            }\n            return r;\n        });\n        localStorage.setItem('resumes', JSON.stringify(resumes));\n    }\n\n    const dltResume = (id) => {\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        resumes = resumes.filter((r)=> {\n            if(id !== r.id){\n                return r;\n            } \n        });\n        localStorage.setItem('resumes', JSON.stringify(resumes));\n    }\n\n    const uploadResume = (data) => {\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n\n        if(Array.isArray(data)){\n          resumes = [...resumes, ...data];\n        } else {\n          resumes.push(data);\n        }\n\n        localStorage.setItem('resumes', JSON.stringify(resumes));\n        return resumes;\n    }\n\n    \n    return {\n        getResumes,\n        getResumeById,\n        saveResume,\n        editResume,\n        dltResume,\n        uploadResume\n    }\n})()","import React, { useState } from \"react\";\nimport \"./professionalTemp.scss\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCircleArrowRight,\n  faEnvelope,\n  faPhone,\n  faMapMarker,\n  faCircle,\n  faAngleRight,\n  faPrint,\n  faBell,\n  faBiking,\n  faHome,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faCircle as faCircleReg } from \"@fortawesome/free-regular-svg-icons\";\n\nexport const ProfessionalTemp = (props) => {\n  const onPrintPreviewBtnClick = () => {\n    window.print();\n  };\n\n  const transformDate = (dtStr, format) => {\n    let date = dtStr ? new Date(dtStr) : new Date();\n    const monthList = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    const d = date.getDate(),\n      m = date.getMonth() + 1,\n      y = date.getFullYear();\n\n    const formatMap = {\n      \"d-m-y\": (d <= 9 ? \"0\" + d : d) + \"-\" + (m <= 9 ? \"0\" + m : m) + \"-\" + y,\n      \"m-y\": monthList[m - 1] + \" \" + y,\n      y: y,\n    };\n\n    return formatMap[format] || formatMap[\"m-y\"];\n  };\n\n  return (\n    <>\n      <h4>Professional Resume</h4>\n\n      <Button\n        className=\"print-btn\"\n        size=\"large\"\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          onPrintPreviewBtnClick();\n        }}\n      >\n        <FontAwesomeIcon icon={faPrint} /> &nbsp; PRINT\n      </Button>\n\n      <hr />\n      <div id=\"section-to-print\" className=\"resume-temp-main-cont\">\n        <div className=\"head\">\n          <h1 className=\"title\">{props.resumeData.general.name}</h1>\n          <div class=\"contact-details\">\n            <span class=\"cd\">{props.resumeData.general.location}</span>\n            <span class=\"dot-seperator\">.</span>\n            <span class=\"cd\">{props.resumeData.general.phone}</span>\n            <span class=\"dot-seperator\">.</span>\n            <span class=\"cd\">{props.resumeData.general.email}</span>\n            <span class=\"dot-seperator\">.</span>\n            <span class=\"cd\">{props.resumeData.general.linkedIn.replace(\"https://\", \"\")}</span>\n          </div>\n        </div>\n\n        {/* <div class=\"line-seperator\"></div> */}\n\n        <div className=\"experience\">\n          <div className=\"cont-title\">PROFESSIONAL EXPERIENCE</div>\n          {props.resumeData.experiences.map((exp) => {\n            const expHtml = (\n              <div key={exp.company} className=\"experience-item\">\n                <div className=\"exp-title1\">\n                  <span class=\"exp-duration\">\n                    {transformDate(exp.startDate)} -{\" \"}\n                    {exp.current ? \"Present\" : transformDate(exp.endDate)}\n                  </span>\n                  <span className=\"comp\">{exp.company}, </span>\n                  <span className=\"comp-addr\">{exp.location}</span>\n                </div>\n                <div className=\"exp-title2\">\n                  <span className=\"exp-desig\">{exp.title} </span>{\" \"}\n                </div>\n                <div className=\"resp\">\n                  {exp.roles.split(\"\\n\").map((role) => {\n                    return (\n                      <>\n                        <div className=\"respItem\">\n                           <span className=\"rolse-desc\">{role}</span>\n                        </div>\n                      </>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n            return expHtml;\n          })}\n        </div>\n\n        <div className=\"education m-t\">\n          <div className=\"cont-title\">EDUCATION</div>\n          {props.resumeData.educations.map((edu, i) => {\n            const eduHtml = (\n              <>\n                <div className=\"edu-item\">\n                  <div className=\"line\">\n                    <div className=\"year\">\n                      {transformDate(edu.startDate, \"y\") ==\n                      transformDate(edu.endDate, \"y\")\n                        ? transformDate(edu.endDate, \"y\")\n                        : transformDate(edu.startDate, \"y\") +\n                          \" - \" +\n                          transformDate(edu.endDate, \"y\")}\n                    </div>\n                    <div>\n                      <span className=\"insti\">{edu.school.split(\",\")[0]}</span>\n                      <span className=\"add\">\n                        ,{edu.school.split(\",\").slice(1).join(\",\")}\n                      </span>\n                    </div>\n                    <div className=\"degree\">{edu.degree}</div>\n                  </div>\n                </div>\n              </>\n            );\n            if(i < 2){\n                return eduHtml;\n            }\n          })}\n        </div>\n\n        <div className=\"skills\">\n          <div className=\"cont-title\">SKILLS</div>\n\n          {props.resumeData.technicalSkills.ratings.map((rating, i) => {\n              const skill = props.resumeData.technicalSkills.skills[i];\n              const tsHtml = (\n                <>\n                  <div className=\"skill-name\">\n                  {skill}\n                  </div>\n\n                </>\n              );\n              return tsHtml;\n            })}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./modernResumeTemp.scss\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCircleArrowRight,\n  faEnvelope,\n  faPhone,\n  faMapMarker,\n  faCircle,\n  faAngleRight,\n  faPrint,\n  faBell,\n  faBiking,\n  faHome,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faCircle as faCircleReg } from \"@fortawesome/free-regular-svg-icons\";\n\nexport const ModernTemp = (props) => {\n  const defaultSectionPositions = {\n    professionalSkills: \"r\",\n    educations: \"r\",\n    languages: \"r\",\n    projects: \"b\",\n  };\n  const [sectionPosition, setSectionPosition] = useState(\n    defaultSectionPositions\n  );\n  const onPrintPreviewBtnClick = () => {\n    window.print();\n  };\n\n  const changeSectionPosition = (sectionName, position) => {\n    let copy = JSON.parse(JSON.stringify(sectionPosition));\n    copy[sectionName] = position;\n    setSectionPosition(copy);\n  };\n\n  const transformDate = (dtStr, format) => {\n    let date = dtStr ? new Date(dtStr) : new Date();\n    const monthList = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const d = date.getDate(),\n    m = date.getMonth() + 1,\n    y = date.getFullYear();\n\n    const formatMap = {\n      \"d-m-y\": (d <= 9 ? \"0\" + d : d) +\"-\"+ (m <= 9 ? \"0\" + m : m) +\"-\"+ y,\n      \"m-y\": (monthList[m - 1]+\" \"+y),\n      \"y\": y\n    }\n    \n    return formatMap[format] || formatMap[\"m-y\"];\n  }\n\n  return (\n    <>\n      <h4>Modern Resume</h4>\n\n      {/* \n      <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\"/>\n      <FontAwesomeIcon icon={faEnvelope} />\n      <FontAwesomeIcon icon={faPhone} />\n      <FontAwesomeIcon icon={faMapMarker} />\n      <FontAwesomeIcon icon={faCircle} />\n      <FontAwesomeIcon icon={faCircleReg} />\n      <FontAwesomeIcon icon={faAngleRight} />  \n      <FontAwesomeIcon icon={faPrint} />  \n      */}\n\n      <Button\n        className=\"print-btn\"\n        size=\"large\"\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          onPrintPreviewBtnClick();\n        }}\n      >\n        <FontAwesomeIcon icon={faPrint} /> &nbsp; PRINT\n      </Button>\n\n      {/* <code>{JSON.stringify(props)}</code>  */}\n      <hr />\n\n      <div id=\"section-to-print\" className=\"resume-temp-main-cont\">\n        <div className=\"left-cont\">\n          <div className=\"head\">\n            <div className=\"title\">{props.resumeData.general.name}</div>\n          </div>\n\n          <div className=\"desc\">\n            <div className=\"nm\"></div>\n            <div className=\"designation\">{props.resumeData.general.title}</div>\n            <div className=\"description\">{props.resumeData.general.about}</div>\n          </div>\n\n          <div className=\"experience\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n              &nbsp; PROFESSIONAL EXPERIENCE\n            </div>\n            {props.resumeData.experiences.map((exp) => {\n              const expHtml = (\n                <div key={exp.company} className=\"experience-item\">\n                  <div className=\"title1\">\n                    <span className=\"exp-desig\">{exp.title}, </span>{\" \"}\n                    <span class=\"exp-duration\">\n                      {transformDate(exp.startDate)} - {exp.current ? \"Present\" : transformDate(exp.endDate)}\n                    </span>\n                  </div>\n                  <div className=\"title2\">\n                    <span className=\"comp\">{exp.company}, </span>\n                    <span className=\"comp-addr\">{exp.location}</span>\n                  </div>\n                  <div className=\"resp\">\n                    {exp.roles.split(\"\\n\").map((role) => {\n                      return (\n                        <>\n                          {\" \"}\n                          <div className=\"respItem\">\n                            {\" \"}\n                            <FontAwesomeIcon icon={faAngleRight} /> {role}\n                          </div>{\" \"}\n                        </>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n              return expHtml;\n            })}\n          </div>\n          {sectionPosition.educations == \"l\" ? (\n            <div className=\"education m-t\">\n              <div className=\"cont-title\">\n                <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n                &nbsp;EDUCATION\n                <button\n                  className=\"position-btn fr\"\n                  onClick={() => {\n                    changeSectionPosition(\"educations\", \"r\");\n                  }}\n                >\n                  Move Right\n                </button>\n              </div>\n              {props.resumeData.educations.map((edu) => {\n                const eduHtml = (\n                  <>\n                    <div className=\"edu-item\">\n                      <div className=\"line\">\n                        <div className=\"degree\">{edu.degree}</div>\n                        <div>\n                          <span className=\"insti\">\n                            {edu.school.split(\",\")[0]}\n                          </span>\n                          <span className=\"add\">\n                            ,{edu.school.split(\",\").slice(1).join(\",\")}\n                          </span>\n                        </div>\n                        <div className=\"year\">\n                          { (transformDate(edu.startDate, \"y\") == transformDate(edu.endDate, \"y\")) ? transformDate(edu.endDate, \"y\") : (transformDate(edu.startDate, \"y\") +\" - \"+ transformDate(edu.endDate, \"y\"))}\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                );\n                return eduHtml;\n              })}\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          {sectionPosition.projects == \"l\" ? (\n            <div className=\"projects proj-item-l\">\n              <div className=\"cont-title\">\n                <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" /> &nbsp;\n                PROJECTS\n                <button\n                  className=\"position-btn fr\"\n                  onClick={() => {\n                    changeSectionPosition(\"projects\", \"b\");\n                  }}\n                >\n                  Move Bottom\n                </button>\n              </div>\n\n              {props.resumeData.projects.map((proj, i) => {\n                const projHtml = (\n                  <>\n                    <div className=\"proj-item\">\n                      {/* <div className=\"left\"> */}\n                      <div className=\"caption\">\n                        <div className=\"name\">\n                          {i + 1}. {proj.name}\n                        </div>\n                        {proj.url.split(\",\").map((l) => {\n                          return <div className=\"link\">{l}</div>;\n                        })}\n                      </div>\n\n                      <div className=\"desc-cont m-t\">\n                        <div className=\"desc-title\">Description</div>\n                        <div className=\"desc\">{proj.desc}</div>\n                      </div>\n\n                      <div className=\"tect-cont m-t\">\n                        <div className=\"tech-title\">Technologies</div>\n                        <div className=\"tech\">\n                          <span>{proj.tech} </span>\n                        </div>\n                      </div>\n                      {/* </div>\n                      <div className=\"right\"> */}\n                      <div className=\"roles-title m-t\">\n                        Roles & Responsibilities\n                      </div>\n\n                      {proj.roles.split(\"\\n\").map((role) => {\n                        return (\n                          <>\n                            {\" \"}\n                            <div className=\"role\">\n                              {\" \"}\n                              <FontAwesomeIcon icon={faAngleRight} /> {role}\n                            </div>{\" \"}\n                          </>\n                        );\n                      })}\n                      {/* </div> */}\n                      <div className=\"clear\"></div>\n                    </div>\n                  </>\n                );\n                return projHtml;\n              })}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n\n        <div className=\"right-cont\">\n          <div className=\"photo\">\n            <img src={props.resumeData.general.image} />\n          </div>\n\n          <div className=\"contact-details m-t\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" /> &nbsp;\n              CONTACT DETAILS\n            </div>\n\n            <div className=\"contact-item\">\n              <div className=\"item-left\">\n                <FontAwesomeIcon icon={faPhone} size=\"lg\" />\n              </div>\n              <div className=\"item-right\">{props.resumeData.general.phone}</div>\n              <div className=\"clear\"></div>\n            </div>\n\n            <div className=\"contact-item\">\n              <div className=\"item-left\">\n                <FontAwesomeIcon icon={faEnvelope} size=\"lg\" />\n              </div>\n              <div className=\"item-right\">{props.resumeData.general.email}</div>\n              <div className=\"clear\"></div>\n            </div>\n\n            <div className=\"contact-item\">\n              <div className=\"item-left\">\n                <img\n                  className=\"linkedin-icon-size\"\n                  src=\"https://cdn-icons-png.flaticon.com/512/61/61109.png\"\n                />\n              </div>\n              <div className=\"item-right\">\n                {props.resumeData.general.linkedIn}\n              </div>\n              <div className=\"clear\"></div>\n            </div>\n\n            <div className=\"contact-item\">\n              <div className=\"item-left\">\n                <FontAwesomeIcon icon={faMapMarker} size=\"lg\" />\n              </div>\n              <div className=\"item-right\">\n                {props.resumeData.general.location}\n              </div>\n              <div className=\"clear\"></div>\n            </div>\n          </div>\n\n          <div className=\"technical-details m-t\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n              &nbsp;TECHNICAL SKILLS\n            </div>\n\n            {props.resumeData.technicalSkills.ratings.map((rating, i) => {\n              const skill = props.resumeData.technicalSkills.skills[i];\n              const tsHtml = (\n                <>\n                  <div className=\"skill\">\n                    <div className=\"left\">{skill}</div>\n                    <div className=\"right\">\n                      {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1].map((r) => {\n                        const ratingHtml = (\n                          <>\n                            {r <= rating ? (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircle}\n                              />\n                            ) : (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircleReg}\n                              />\n                            )}\n                          </>\n                        );\n                        return ratingHtml;\n                      })}\n                    </div>\n                    <div className=\"clear\"></div>\n                  </div>\n                </>\n              );\n              return tsHtml;\n            })}\n          </div>\n\n          <div className=\"personal-details m-t\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n              &nbsp;PERSONAL SKILLS\n            </div>\n\n            {props.resumeData.professionalSkills.ratings.map((rating, i) => {\n              const skill = props.resumeData.professionalSkills.skills[i];\n              const tsHtml = (\n                <>\n                  <div className=\"skill\">\n                    <div className=\"left\">{skill}</div>\n                    <div className=\"right\">\n                      {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1].map((r) => {\n                        const ratingHtml = (\n                          <>\n                            {r <= rating ? (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircle}\n                              />\n                            ) : (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircleReg}\n                              />\n                            )}\n                          </>\n                        );\n                        return ratingHtml;\n                      })}\n                    </div>\n                    <div className=\"clear\"></div>\n                  </div>\n                </>\n              );\n              return tsHtml;\n            })}\n          </div>\n\n          <div className=\"language m-t\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n              &nbsp;LANGUAGE\n            </div>\n\n            {props.resumeData.languages.ratings.map((rating, i) => {\n              const lang = props.resumeData.languages.lang[i];\n              const tsHtml = (\n                <>\n                  <div className=\"skill\">\n                    <div className=\"left\">{lang}</div>\n                    <div className=\"right\">\n                      {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1].map((r) => {\n                        const ratingHtml = (\n                          <>\n                            {r <= rating ? (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircle}\n                              />\n                            ) : (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircleReg}\n                              />\n                            )}\n                          </>\n                        );\n                        return ratingHtml;\n                      })}\n                    </div>\n                    <div className=\"clear\"></div>\n                  </div>\n                </>\n              );\n              return tsHtml;\n            })}\n          </div>\n          {sectionPosition.educations == \"r\" ||\n          !sectionPosition ||\n          !sectionPosition?.educations ? (\n            <div className=\"edu m-t\">\n              <div className=\"cont-title\">\n                <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n                &nbsp;EDUCATION\n                <button\n                  className=\"position-btn fr\"\n                  onClick={() => {\n                    changeSectionPosition(\"educations\", \"l\");\n                  }}\n                >\n                  Move Left\n                </button>\n              </div>\n              {props.resumeData.educations.map((edu) => {\n                const eduHtml = (\n                  <>\n                    <div className=\"edu-item\">\n                      <div className=\"line\">\n                        <span className=\"degree\">{edu.degree}</span>\n                        <span className=\"year\">\n                          ({ (transformDate(edu.startDate, \"y\") == transformDate(edu.endDate, \"y\")) ? transformDate(edu.endDate, \"y\") : (transformDate(edu.startDate, \"y\") +\" - \"+ transformDate(edu.endDate, \"y\"))})\n                        </span>\n                      </div>\n\n                      <div className=\"line\">\n                        <span className=\"insti\">\n                          {edu.school.split(\",\")[0]}\n                        </span>\n                        <span className=\"add\">\n                          ,{edu.school.split(\",\").slice(1).join(\",\")}\n                        </span>\n                      </div>\n                    </div>\n                  </>\n                );\n                return eduHtml;\n              })}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n\n        <div className=\"clear\"></div>\n\n        {sectionPosition.projects == \"b\" ? (\n          <div className=\"projects\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" /> &nbsp;\n              PROJECTS\n              <button\n                className=\"position-btn fr\"\n                onClick={() => {\n                  changeSectionPosition(\"projects\", \"l\");\n                }}\n              >\n                Move Left\n              </button>\n            </div>\n\n            {props.resumeData.projects.map((proj, i) => {\n              const projHtml = (\n                <>\n                  <div className=\"proj-item\">\n                    <div className=\"left\">\n                      <div className=\"caption\">\n                        <div className=\"name\">\n                          {i + 1}. {proj.name}\n                        </div>\n                        {proj.url.split(\",\").map((l) => {\n                          return <div className=\"link\">{l}</div>;\n                        })}\n                      </div>\n\n                      <div className=\"desc-cont m-t\">\n                        <div className=\"desc-title\">Description</div>\n                        <div className=\"desc\">{proj.desc}</div>\n                      </div>\n\n                      <div className=\"tect-cont m-t\">\n                        <div className=\"tech-title\">Technologies</div>\n                        <div className=\"tech\">\n                          <span>{proj.tech} </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"right\">\n                      <div className=\"roles-title\">\n                        Roles & Responsibilities\n                      </div>\n\n                      {proj.roles.split(\"\\n\").map((role) => {\n                        return (\n                          <>\n                            {\" \"}\n                            <div className=\"role\">\n                              {\" \"}\n                              <FontAwesomeIcon icon={faAngleRight} /> {role}\n                            </div>{\" \"}\n                          </>\n                        );\n                      })}\n                    </div>\n                    <div className=\"clear\"></div>\n                  </div>\n                </>\n              );\n              return projHtml;\n            })}\n          </div>\n        ) : (\n          \"\"\n        )}\n        <div className=\"clear\"></div>\n\n        <div className=\"footer\">\n          <div className=\"left\">\n            <div>Date : {transformDate(null, \"d-m-y\")}</div>\n            <div className=\"m-t\">{props.resumeData.general.location}</div>\n          </div>\n          <div className=\"right\">\n            <div className=\"sign\">{props.resumeData.general.name}</div>\n          </div>\n          <div className=\"clear\"></div>\n        </div>\n\n        <div className=\"clear\"></div>\n      </div>\n    </>\n  );\n};\n","import React, {useState} from \"react\";\nimport { ProfessionalTemp } from \"./allTemplates/professional/ProfessionalTemp\";\nimport { ModernTemp } from \"./allTemplates/modern/ModernTemp\";\n\nexport const ResumePreview = (props) => {\n    const resumeData = props.addResumeForm.getValue()\n    return (\n        <div className=\"previewResumeCont\">\n            <h1 className=\"h2Title\">Resume Preview</h1>\n          {/* <div>{JSON.stringify(props.selectedResumeTemp)}</div>\n            <div>{JSON.stringify(props.selectedResumeTemp.name)}</div> */}\n\n           {props.selectedResumeTemp.name == \"Professional\" && <ProfessionalTemp resumeData={resumeData}/>}\n           {props.selectedResumeTemp.name === \"Modern\" && <ModernTemp resumeData={resumeData}/>}\n        </div>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport \"./resumeTemp.css\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\n\nimport {\n  Add,\n  Delete,\n  CheckCircle,\n  RadioButtonUnchecked,\n  RadioButtonChecked,\n} from \"@mui/icons-material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { ResumePreview } from \"./ResumePreview\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"left\" ref={ref} {...props} />;\n});\n\nexport const ResumeTemplate = ({\n  addResumeForm,\n  resumeFormFields,\n  onAdd,\n  onDlt,\n  resumeEditData\n}) => {\n  const handleClose = () => {\n    setShowPreview(false);\n  };\n\n  const _resumeTemplates = [\n    {\n      id: 0,\n      name: \"Professional\",\n      image: \"resume_temp_1.jpeg\",\n    },\n    {\n      id: 1,\n      name: \"Modern\",\n      image: \"resume_temp_2.jpeg\",\n    },\n  ];\n\n  const [showPreview, setShowPreview] = useState(false);\n\n  const selectResumeTemp = (idx) => {\n    console.log(\"selectResumeTemp :: idx ::\", idx);\n    console.log(\n      \"selectResumeTemp :: _resumeTemplates[idx] ::\",\n      _resumeTemplates[idx]\n    );\n    setTempleteInResumeObj(_resumeTemplates[idx]);\n  };\n\n  const onPreviewBtnClick = () => {\n    setShowPreview(true);\n  };\n\n  const setTempleteInResumeObj = (selectedResumeTemp) => {\n    console.log(\n      \"setTempleteInResumeObj :: selectedResumeTemp ::\",\n      selectedResumeTemp\n    );\n    let copyResumeFormFields = JSON.parse(JSON.stringify(resumeFormFields));\n    copyResumeFormFields[\"template\"] = selectedResumeTemp;\n    addResumeForm.setState(copyResumeFormFields);\n    console.log(\"resumeFormFields.template ::\", resumeFormFields.template);\n  };\n\n  useEffect((e) => {\n    if (resumeFormFields?.template?.id) return;\n    resumeEditData?.template?.id ? setTempleteInResumeObj(resumeEditData?.template) : setTempleteInResumeObj(_resumeTemplates[0]);\n  }, []);\n\n  return (\n    <>\n      <h2 className=\"title2\">Templates</h2>\n      <Card>\n        <CardContent className=\"p-rel\">\n          <Grid className=\"contRowMargin\" container spacing={2}>\n            {_resumeTemplates?.map((rt, i) => {\n              return (\n                <Grid\n                  key={\"rt\" + i}\n                  onClick={() => {\n                    selectResumeTemp(i);\n                  }}\n                  className={\n                    \"resume-temp-grid \" +\n                    (rt.id === resumeFormFields.template?.id && \"active\")\n                  }\n                  item\n                  xs={2}\n                  md={2}\n                  sx={2}\n                >\n                  <img\n                    className=\"temp-img\"\n                    src={\"images/\" + rt.image}\n                    alt={rt.name}\n                    loading=\"lazy\"\n                  />\n\n                  <div className=\"resume-temp-check-icon\">\n                    {rt.id === resumeFormFields.template?.id ? (\n                      <RadioButtonChecked color=\"primary\"/>\n                    ) : (\n                      <RadioButtonUnchecked />\n                    )}\n                  </div>\n\n                  <div className={\"bold resume-temp-title \" + (rt.id === resumeFormFields.template?.id && \"selected\")}>{rt.name}</div>\n                </Grid>\n              );\n            })}\n          </Grid>\n\n          <Button\n            className=\"pr previewBtn\"\n            size=\"large\"\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              onPreviewBtnClick();\n            }}\n          >\n            PREVIEW\n          </Button>\n        </CardContent>\n      </Card>\n\n      <Dialog\n        fullScreen\n        open={showPreview}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n      >\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          onClick={handleClose}\n          aria-label=\"close\"\n          className=\"closeBtn\"\n        >\n          <CloseIcon />\n        </IconButton>\n        <ResumePreview selectedResumeTemp={resumeFormFields.template} addResumeForm={addResumeForm}/>\n      </Dialog>\n    </>\n  );\n};\n","import { FormService } from \"./FormService\";\nconst addResumeForm = FormService;\n\nconst fieldsMinCount = {\n  technicalSkills: 4,\n  professionalSkills: 2,\n  experiences: 1,\n  educations: 2,\n  projects: 1,\n  certificates: 1,\n  languages: 2,\n};\n\nconst fields = {\n  general: {\n    resumeName: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    name: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    title: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    about: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    image: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n      addResumeForm.validators.url\n    ]),\n    phone: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    email: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n      addResumeForm.validators.email,\n    ]),\n    linkedIn: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n      addResumeForm.validators.url,\n    ]),\n    location: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n  },\n  technicalSkills: (resumeEditData) => {\n    return {\n      skills: new Array(\n        resumeEditData?.technicalSkills?.ratings?.length || fieldsMinCount.technicalSkills\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      ),\n      ratings: new Array(\n        resumeEditData?.technicalSkills?.ratings?.length || fieldsMinCount.technicalSkills\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      ),\n    };\n  },\n  professionalSkills: (resumeEditData) => {\n    return {\n      skills: new Array(\n        resumeEditData?.professionalSkills?.ratings?.length ||\n        fieldsMinCount.professionalSkills\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      ),\n      ratings: new Array(\n        resumeEditData?.professionalSkills?.ratings?.length ||\n        fieldsMinCount.professionalSkills\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      ),\n    };\n  },\n  experiences: {\n    title: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    employmentType: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"fullTime\"\n    ),\n    company: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    location: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    startDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    endDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    roles: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    current: addResumeForm.getGeneralFieldObj([], false),\n  },\n  educations: {\n    school: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    degree: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    field: addResumeForm.getGeneralFieldObj(),\n    startDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    endDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    grade: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n  },\n  projects: {\n    name: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    company: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    url: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.url,\n    ]),\n    startDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    endDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    desc: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    tech: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    roles: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    current: addResumeForm.getGeneralFieldObj([], false),\n  },\n  certificates: {\n    name: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    org: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    startDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    endDate: addResumeForm.getGeneralFieldObj([], \"dateString\"),\n    cid: addResumeForm.getGeneralFieldObj(),\n    url: addResumeForm.getGeneralFieldObj([addResumeForm.validators.url]),\n  },\n  languages: (resumeEditData) => {\n    return {\n      lang: new Array(\n        resumeEditData?.languages?.ratings?.length || fieldsMinCount.languages\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      ),\n      ratings: new Array(\n        resumeEditData?.languages?.ratings?.length || fieldsMinCount.languages\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      ),\n    };\n  },\n};\nconst getFieldsMinCount = (name) => {\n  return fieldsMinCount[name];\n};\nconst getFields = (name, resumeEditData) => {\n  //console.log(\"getFields :: name ::\", name);\n  if ([\"technicalSkills\", \"professionalSkills\", \"languages\"].includes(name)) {\n    return fields[name](resumeEditData);\n  } else {\n    return fields[name];\n  }\n};\nconst getFieldList = (name, data) => {\n  if ([\"technicalSkills\", \"professionalSkills\", \"languages\"].includes(name)) {\n    return getFields(name, data);\n  } else if([\"general\"].includes(name)){\n    return getFields(name);\n  }else {\n    return new Array(data || fieldsMinCount[name]).fill(getFields(name));\n  }\n};\n\nexport const FormFieldService = {\n  getFieldsMinCount,\n  getFields,\n  getFieldList,\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\n\nexport const EduTemp = ({ addResumeForm, resumeFormFields, onAdd, onDlt, resumeEditData }) => {\n  \n  return (\n    <div>\n      <h2 className=\"title2\">Educations</h2>\n\n      {resumeFormFields?.educations?.map((edu, i) => {\n        const projDiv = (\n          <Card key={\"edu_\" + i} className=\"card-container\">\n            <CardContent>\n              <div className=\"snodiv\">{\"#EDUCATION : \" + (i + 1)}</div>\n              <Grid className=\"\" container spacing={2}>\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"school_\" + (i + 1)}\n                    label={\"School \"}\n                    type=\"text\"\n                    value={edu.school.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"school\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"school\",\n                      ]);\n                    }}\n                    error={edu.school.errors.length == 0 ? false : true}\n                    helperText={edu.school.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"degree_\" + (i + 1)}\n                    label={\"Degree \"}\n                    type=\"text\"\n                    value={edu.degree.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"degree\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"degree\",\n                      ]);\n                    }}\n                    error={edu.degree.errors.length == 0 ? false : true}\n                    helperText={edu.degree.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"field_\" + (i + 1)}\n                    label={\"Field \"}\n                    placeholder=\"eg. Business\"\n                    type=\"text\"\n                    value={edu.field.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"field\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"field\",\n                      ]);\n                    }}\n                    error={edu.field.errors.length == 0 ? false : true}\n                    helperText={edu.field.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"startDate_\" + (i + 1)}\n                    label={\"Start Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={edu.startDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    error={edu.startDate.errors.length == 0 ? false : true}\n                    helperText={edu.startDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"endDate_\" + (i + 1)}\n                    label={\"End Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={edu.endDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    error={edu.endDate.errors.length == 0 ? false : true}\n                    helperText={edu.endDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"grade_\" + (i + 1)}\n                    label={\"Grade\"}\n                    type=\"text\"\n                    value={edu.grade.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"grade\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"grade\",\n                      ]);\n                    }}\n                    error={edu.grade.errors.length == 0 ? false : true}\n                    helperText={edu.grade.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={1} md={1} sx={1}>\n                  {i === resumeFormFields.educations.length - 1 && (\n                    <Tooltip title=\"Add New Education\" placement=\"bottom\">\n                      <IconButton\n                        onClick={() => {\n                          onAdd([\"educations\"], FormFieldService.getFields(\"educations\"));\n                        }}\n                      >\n                        <AddCircleOutlineOutlinedIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  {resumeFormFields?.educations?.length > FormFieldService.getFieldsMinCount(\"educations\") && (\n                    <Tooltip title=\"Delete Education\" placement=\"bottom\">\n                      <IconButton\n                        onClick={() => {\n                          onDlt([\"educations\"], i);\n                        }}\n                      >\n                        <Delete />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        );\n        return projDiv;\n      })}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n  Checkbox\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\n\nexport const ProjTemp = ({ addResumeForm, resumeFormFields, onAdd, onDlt, resumeEditData }) => {\n  \n  return (\n    <div>\n      <h2 className=\"title2\">Projects</h2>\n\n      {resumeFormFields?.projects?.map((p, i) => {\n        const projDiv = (\n          <Card key={\"proj_\" + i} className=\"card-container\">\n            <CardContent>\n              <div className=\"snodiv\">{\"#PROJECT : \" + (i + 1)}</div>\n              <div>\n                              <Checkbox className=\"checkBox-pad\"\n                                {... { inputProps: { 'aria-label': 'Checkbox demo' } }}\n                                sx={{ \"& .MuiSvgIcon-root\": { fontSize: 28 } }}\n                                checked={p.current.value}\n                                onChange={(e)=>{\n                                  addResumeForm.onFormFieldChange(e, [\n                                    \"projects\",\n                                    i,\n                                    \"current\",\n                                  ]);\n                                  setTimeout(() => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"projects\",\n                                      i,\n                                      \"endDate\",\n                                    ], e.target.checked);\n                                  });\n                                  \n                                }}\n                              />\n                              <span>Presently Working</span>\n                            </div>\n              <Grid className=\"\" container spacing={2}>\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"name_\" + (i + 1)}\n                    label={\"Name \"}\n                    type=\"text\"\n                    value={p.name.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"name\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"name\",\n                      ]);\n                    }}\n                    error={p.name.errors.length == 0 ? false : true}\n                    helperText={p.name.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"url_\" + (i + 1)}\n                    label={\"Project Url \"}\n                    type=\"text\"\n                    value={p.url.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"url\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"url\",\n                      ]);\n                    }}\n                    error={p.url.errors.length == 0 ? false : true}\n                    helperText={p.url.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"startDate_\" + (i + 1)}\n                    label={\"Start Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={p.startDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    error={p.startDate.errors.length == 0 ? false : true}\n                    helperText={p.startDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"endDate_\" + (i + 1)}\n                    label={\"End Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    disabled={p.endDate.disabled}\n                    value={p.endDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    error={p.endDate.errors.length == 0 ? false : true}\n                    helperText={p.endDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={6} md={6} sx={6}>\n                  <TextField\n                    id={\"proj_comp_\" + (i + 1)}\n                    label={\"Project's Commpany \"}\n                    type=\"text\"\n                    value={p.company.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"company\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"company\",\n                      ]);\n                    }}\n                    error={p.company.errors.length == 0 ? false : true}\n                    helperText={p.company.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={6} md={6} sx={6}>\n                  <TextField\n                    id={\"tech_\" + (i + 1)}\n                    label={\"Technologies Used\"}\n                    placeholder=\"HTML, CSS, Javascript\"\n                    type=\"text\"\n                    value={p.tech.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"tech\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"tech\",\n                      ]);\n                    }}\n                    error={p.tech.errors.length == 0 ? false : true}\n                    helperText={p.tech.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={12} md={12} sx={12}>\n                  <TextField\n                    id={\"desc_\" + (i + 1)}\n                    label={\"Description \"}\n                    multiline\n                    rows={3}\n                    type=\"text\"\n                    value={p.desc.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"desc\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"desc\",\n                      ]);\n                    }}\n                    error={p.desc.errors.length == 0 ? false : true}\n                    helperText={p.desc.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={11} md={11} sx={11}>\n                  <TextField\n                    id={\"roles_\" + (i + 1)}\n                    label={\"Roles & Responsibilities\"}\n                    type=\"text\"\n                    multiline\n                    rows={3}\n                    placeholder=\"a. Requirement Gathering &#13;&#10;b. Front-end Development &#13;&#10;c. API development\"\n                    value={p.roles.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"roles\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"roles\",\n                      ]);\n                    }}\n                    error={p.roles.errors.length == 0 ? false : true}\n                    helperText={p.roles.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={1} md={1} sx={1}>\n                  {i === resumeFormFields.projects.length - 1 && (\n                    <Tooltip title=\"Add New Project\" placement=\"bottom\">\n                      <IconButton\n                        onClick={() => {\n                          onAdd([\"projects\"], FormFieldService.getFields(\"projects\"));\n                        }}\n                      >\n                        <AddCircleOutlineOutlinedIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  {resumeFormFields?.projects?.length > FormFieldService.getFieldsMinCount(\"projects\") && (\n                    <Tooltip title=\"Delete Project\" placement=\"bottom\">\n                      <IconButton\n                        onClick={() => {\n                          onDlt([\"projects\"], i);\n                        }}\n                      >\n                        <Delete />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        );\n        return projDiv;\n      })}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\n\nexport const LangTemp = ({\n  addResumeForm,\n  resumeFormFields,\n  setResumeFormFields,\n  onAdd,\n  onDlt,\n  resumeEditData\n}) => {\n\n  return (\n    <div>\n      <h2 className=\"title2\">Languages</h2>\n      <Card>\n        <CardContent>\n          {resumeFormFields?.languages?.lang?.map((ts, i) => {\n            const tsr = resumeFormFields.languages.ratings[i];\n            const tsdiv = (\n              <Grid\n                key={\"row_\" + i}\n                className=\"contRowMargin\"\n                container\n                spacing={2}\n              >\n                <Grid item xs={5} md={5} sx={5}>\n                  <TextField\n                    id={\"name_\" + (i + 1)}\n                    label={\"Language Name \" + (i + 1)}\n                    type=\"text\"\n                    value={ts.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"languages\",\n                        \"lang\",\n                        i,\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"languages\",\n                        \"lang\",\n                        i,\n                      ]);\n                    }}\n                    error={ts.errors.length == 0 ? false : true}\n                    helperText={ts.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={5} md={5} sx={5}>\n                  <div className=\"customInputBorder\">\n                    <div className=\"customInputBorderLabel\">\n                      Rating({tsr.value})\n                    </div>\n                    <Slider\n                      aria-label=\"Rating\"\n                      defaultValue={1}\n                      valueLabelDisplay=\"auto\"\n                      marks\n                      value={tsr.value}\n                      onChange={(e) => {\n                        addResumeForm.onFormFieldChange(e, [\n                          \"languages\",\n                          \"ratings\",\n                          i,\n                        ]);\n                      }}\n                      min={1}\n                      max={10}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={2} md={2} sx={2}>\n                  <div className=\"addDltBtn\">\n                    {i === resumeFormFields.languages.lang.length - 1 && (\n                      <Tooltip title=\"Add New Language\" placement=\"bottom\">\n                        <IconButton\n                          onClick={() => {\n                            onAdd([\"languages\"]);\n                          }}\n                        >\n                          <AddCircleOutlineOutlinedIcon />\n                        </IconButton>\n                      </Tooltip>\n                    )}\n                    {resumeFormFields?.languages?.lang.length > FormFieldService.getFieldsMinCount(\"languages\") && (\n                      <Tooltip title=\"Delete Language\" placement=\"bottom\">\n                        <IconButton\n                          onClick={() => {\n                            onDlt([\"languages\"], i);\n                          }}\n                        >\n                          <Delete />\n                        </IconButton>\n                      </Tooltip>\n                    )}\n                  </div>\n                </Grid>\n              </Grid>\n            );\n            return tsdiv;\n          })}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\n\nexport const CertTemp = ({ addResumeForm, resumeFormFields, onAdd, onDlt, resumeEditData }) => {\n\n  return (\n    <div>\n      <h2 className=\"title2\">\n        Certification or License\n\n        {!resumeFormFields?.certificates?.length && (\n                    <Tooltip\n                      title=\"Add New Certificate or Licence\"\n                      placement=\"bottom\"\n                    >\n                      <IconButton\n                        onClick={() => {\n                          onAdd([\"certificates\"], FormFieldService.getFields(\"certificates\"));\n                        }}\n                      >\n                        <AddCircleOutlineOutlinedIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n        \n        </h2>\n\n      {resumeFormFields?.certificates?.map((cert, i) => {\n        const projDiv = (\n          <Card key={\"cert_\" + i} className=\"card-container\">\n            <CardContent>\n              <div className=\"snodiv\">{\"#CERTIFICATE or LICENCE : \" + (i + 1)}</div>\n              <Grid className=\"\" container spacing={2}>\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"name_\" + (i + 1)}\n                    label={\"Name \"}\n                    type=\"text\"\n                    value={cert.name.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"name\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"name\",\n                      ]);\n                    }}\n                    error={cert.name.errors.length == 0 ? false : true}\n                    helperText={cert.name.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"startDate_\" + (i + 1)}\n                    label={\"Start Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={cert.startDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    error={cert.startDate.errors.length == 0 ? false : true}\n                    helperText={cert.startDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"endDate_\" + (i + 1)}\n                    label={\"End Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={cert.endDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    error={cert.endDate.errors.length == 0 ? false : true}\n                    helperText={cert.endDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"org_\" + (i + 1)}\n                    label={\"Issuing Organisation \"}\n                    type=\"text\"\n                    value={cert.org.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"org\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"org\",\n                      ]);\n                    }}\n                    error={cert.org.errors.length == 0 ? false : true}\n                    helperText={cert.org.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"cid_\" + (i + 1)}\n                    label={\"Credential Id\"}\n                    type=\"text\"\n                    value={cert.cid.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"cid\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"cid\",\n                      ]);\n                    }}\n                    error={cert.cid.errors.length == 0 ? false : true}\n                    helperText={cert.cid.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"url_\" + (i + 1)}\n                    label={\"Credential Url\"}\n                    type=\"text\"\n                    value={cert.url.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"url\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"url\",\n                      ]);\n                    }}\n                    error={cert.url.errors.length == 0 ? false : true}\n                    helperText={cert.url.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={1} md={1} sx={1}>\n                  {i === resumeFormFields.certificates.length - 1 && (\n                    <Tooltip\n                      title=\"Add New Certificate or Licence\"\n                      placement=\"bottom\"\n                    >\n                      <IconButton\n                        onClick={() => {\n                          onAdd([\"certificates\"], FormFieldService.getFields(\"certificates\"));\n                        }}\n                      >\n                        <AddCircleOutlineOutlinedIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  {/* {resumeFormFields?.certificates?.length > FormFieldService.getFieldsMinCount(\"certificates\") && ( */}\n                    <Tooltip\n                      title=\"Delete Certificate or Licence\"\n                      placement=\"bottom\"\n                    >\n                      <IconButton\n                        onClick={() => {\n                          onDlt([\"certificates\"], i);\n                        }}\n                      >\n                        <Delete />\n                      </IconButton>\n                    </Tooltip>\n                  {/* )} */}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        );\n        return projDiv;\n      })}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./addResume.css\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Checkbox,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DatePicker from \"@mui/lab/DatePicker\";\nimport DesktopDatePicker from \"@mui/lab/DesktopDatePicker\";\nimport MobileDatePicker from \"@mui/lab/MobileDatePicker\";\nimport { ResumeService } from \"../../services/ResumeService\";\nimport { ResumeTemplate } from \"./resumeTemplate/ResumeTemplate\";\nimport { FormService } from \"../../services/FormService\";\nimport { EduTemp } from \"./EduTemp\";\nimport { ProjTemp } from \"./ProjTemp\";\nimport { LangTemp } from \"./LangTemp\";\nimport { CertTemp } from \"./CertTemp\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"down\" ref={ref} {...props} />;\n});\n\nexport const AddResume = (props) => {\n  const addResumeCont = {\n    main: {\n      background: \"#fff\",\n      boxSizing: \"border-box\",\n      padding: \"1em\",\n    },\n    sectionsCont: {\n      background: \"#eee\",\n      marginTop: \"9px\",\n      paddingLeft: \"0\",\n      boxShadow: \"0 0 15px rgba(0,0,0,0.75)\",\n      clipPath: \"inset(0px -15px 0px 0px)\",\n    },\n    sectionsRCont: {\n      padding: \"0\",\n    },\n    sectionsContLiUl: {\n      listStyleType: \"none\",\n      paddingLeft: \"0\",\n    },\n    sectionsContLi: {\n      borderBottom: \"1px solid #ccc\",\n      padding: \"20px 30px\",\n      fontSize: \"1.2em\",\n      textTransform: \"uppercase\",\n      cursor: \"pointer\",\n    },\n    form: {\n      background: \"#eee\",\n      marginTop: \"20px\",\n      height: \"calc(100vh - 200px)\",\n      overflowY: \"scroll\",\n      marginTop: \"8px\",\n      boxSizing: \"border-box\",\n      padding: \"1em\",\n    },\n    addDltBtn: {\n      paddingTop: \"16px\",\n    },\n    skillRowMargin: {\n      marginBottom: \"20px\",\n    },\n    expRowMargin: {\n      paddingBottom: \"2.5em\",\n      paddingTop: \"2.5em\",\n      marginBottom: \"1.3em\",\n      boxShadow: \"0 0 10px rgba(0,0,0,0.75)\",\n      clipPath: \"inset(0px 0px -10px 0px)\",\n    },\n    submitBtn: {\n      marginTop: \"1.6%\",\n      marginRight: \"1%\",\n      float: \"right\",\n    },\n  };\n\n  const tabList = {\n    general: \"General\",\n    educations: \"Education\",\n    experiences: \"Experiences\",\n    projects: \"Projects\",\n    technicalSkills: \"Technical Skills\",\n    professionalSkills: \"Professional Skills\",\n    languages: \"Languages\",\n    certificates: \"Certifications & Rewards\",\n    templates: \"Templates\",\n  };\n  const tabs = Object.keys(tabList);\n  const [activeSection, setActiveSection] = useState(props.activeSection || \"general\");\n\n  /* form operations - start */\n  const addResumeForm = FormService;\n\n  const resumeFormFieldsObj = {\n    general: FormFieldService.getFieldList(\"general\"),\n    technicalSkills: FormFieldService.getFieldList(\"technicalSkills\", props?.resumeEditData),\n    professionalSkills: FormFieldService.getFieldList(\"professionalSkills\", props?.resumeEditData),\n    experiences: FormFieldService.getFieldList(\"experiences\", props?.resumeEditData?.experiences?.length),\n    educations: FormFieldService.getFieldList(\"educations\", props?.resumeEditData?.educations?.length),\n    projects: FormFieldService.getFieldList(\"projects\", props?.resumeEditData?.projects?.length),\n    certificates: FormFieldService.getFieldList(\"certificates\", props?.resumeEditData?.certificates?.length),\n    languages: FormFieldService.getFieldList(\"languages\", props?.resumeEditData),\n    template: {},\n  };\n\n  const [resumeFormFields, setResumeFormFields] = useState(resumeFormFieldsObj);\n  addResumeForm.init(resumeFormFields, setResumeFormFields);\n\n  /* form operations - end */\n\n  useEffect(() => {\n    console.log(\n      \"resumeFormFields :: useEffect :: resumeEditData ::\",\n      props.resumeEditData\n    );\n    console.log(\n      \"resumeFormFields :: useEffect :: resumeFormFields ::\",\n      resumeFormFields\n    );\n\n    if (props.resumeEditData) {\n      addResumeForm.setValue(props.resumeEditData);\n    }\n  }, []);\n\n\n  const onAdd = (formNames, fieldsmapObj) => {\n    let copyResumeFormFields = JSON.parse(JSON.stringify(resumeFormFields));\n    let tsList = copyResumeFormFields;\n    for (let fn of formNames) {\n      tsList = tsList[fn];\n    }\n\n    if (\n      formNames.includes(\"technicalSkills\") ||\n      formNames.includes(\"professionalSkills\")\n    ) {\n      tsList.skills.push(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      );\n      tsList.ratings.push(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      );\n    } else if (formNames.includes(\"languages\")) {\n      tsList.lang.push(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      );\n      tsList.ratings.push(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      );\n    } else {\n      tsList.push(fieldsmapObj);\n    }\n\n    setResumeFormFields(copyResumeFormFields);\n  };\n\n  const onDlt = (formNames, index) => {\n    let copyResumeFormFields = JSON.parse(JSON.stringify(resumeFormFields));\n    let tsList = copyResumeFormFields;\n    for (let fn of formNames) {\n      tsList = tsList[fn];\n    }\n\n    if (\n      formNames.includes(\"technicalSkills\") ||\n      formNames.includes(\"professionalSkills\")\n    ) {\n      tsList.skills.splice(index, 1);\n      tsList.ratings.splice(index, 1);\n    } else if (formNames.includes(\"languages\")) {\n      tsList.lang.splice(index, 1);\n      tsList.ratings.splice(index, 1);\n    } else {\n      tsList.splice(index, 1);\n    }\n\n    setResumeFormFields(copyResumeFormFields);\n  };\n\n  const onFormSubmit = (id) => {\n    console.log(\n      \"onFormSubmit :: resumeFormFields :: id :: \",\n      resumeFormFields,\n      id\n    );\n    const payload = addResumeForm.getValue();\n\n    if (id) {\n      ResumeService.editResume(id, payload);\n      props.closeForm();\n    } else {\n      if (activeSection === tabs[tabs.length - 1]) {\n        // save\n        const errorTab = [];\n        const tabErrors = JSON.parse(JSON.stringify(tabList));\n        for (let tab in tabErrors) {\n          const error = !addResumeForm.isFormValid(tab);\n          if (error) {\n            errorTab.push(tab);\n            tabErrors[tab] = error;\n            break;\n          }\n        }\n\n        console.log(\"onFormSubmit :: errorTab ::\", errorTab);\n\n        if (errorTab.length) {\n          setActiveSection(errorTab[0]);\n        } else {\n          console.log(\"onFormSubmit :: payload ::\", payload);\n          ResumeService.saveResume(payload);\n          props.closeForm();\n        }\n      } else {\n        if (addResumeForm.isFormValid(activeSection)) {\n          setActiveSection(tabs[tabs.indexOf(activeSection) + 1]);\n        }\n      }\n    }\n  };\n\n  return (\n    <Dialog\n      fullScreen\n      open={true}\n      onClose={props.closeForm}\n      TransitionComponent={Transition}\n    >\n      <IconButton\n        edge=\"start\"\n        color=\"inherit\"\n        onClick={props.closeForm}\n        aria-label=\"close\"\n        className=\"closeBtn\"\n      >\n        <CloseIcon />\n      </IconButton>\n      <div style={addResumeCont.main}>\n        <h1 className=\"title1\">\n          {props.resumeEditData ? \"Edit\" : \"Add\"} Resume{\" \"}\n        </h1>\n        {/* <h3 className=\"title2\"> {props.resumeEditData ?  props.resumeEditData?.general?.resumeName : ''}</h3> */}\n        <hr></hr>\n\n        <Grid container spacing={2}>\n          <Grid style={addResumeCont.sectionsCont} item xs={2} md={2} sx={2}>\n            <ul style={addResumeCont.sectionsContLiUl}>\n              {Object.keys(tabList).map((tab, i) => {\n                const tabHtml = (\n                  <li\n                    key={tab + i}\n                    style={addResumeCont.sectionsContLi}\n                    className={\n                      \"section \" + (activeSection === tab && \"activeSection\")\n                    }\n                    onClick={() => {\n                      setActiveSection(tab);\n                    }}\n                  >\n                    {tabList[tab]}\n                  </li>\n                );\n                return tabHtml;\n              })}\n            </ul>\n          </Grid>\n\n          <Grid\n            style={addResumeCont.sectionsRCont}\n            item\n            xs={10}\n            md={10}\n            sx={10}\n          >\n            <form style={addResumeCont.form}>\n              {(activeSection === \"intro\" || activeSection === \"general\") && (\n                <>\n                  <h2 className=\"title2\">Resume Name</h2>\n                  <Card>\n                    <CardContent>\n                      <Grid container spacing={2}>\n                        <Grid item xs={6} md={6} sx={6}>\n                          <TextField\n                            id=\"resumeName\"\n                            label=\"Resume Name\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.resumeName.value}\n                            placeholder=\"eg. Resume-India\"\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"resumeName\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"resumeName\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.resumeName.errors\n                                .length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.resumeName.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                  </Card>\n\n                  <h2 className=\"title2\">Introduction</h2>\n                  <Card>\n                    <CardContent>\n                      <Grid container spacing={2}>\n                        <Grid item xs={6} md={6} sx={6}>\n                          {/* <input className=\"formGroup\" type=\"text\" id=\"name\" placeholder=\"Name\" />     */}\n                          <TextField\n                            id=\"name\"\n                            label=\"Name\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.name.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"name\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"name\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.name.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.name.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={6} md={6} sx={6}>\n                          <TextField\n                            id=\"title\"\n                            label=\"Title\"\n                            placeholder=\"eg. Full Stack Developer @AB\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.title.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"title\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"title\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.title.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.title.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={12} md={12}>\n                          <TextField\n                            id=\"about\"\n                            label=\"About Yourself...\"\n                            multiline\n                            rows={2}\n                            value={resumeFormFields.general.about.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"about\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"about\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.about.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.about.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={12} md={12} sx={12}>\n                          <TextField\n                            id=\"image\"\n                            label=\"Image Url\"\n                            placeholder=\"Provide Image url\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.image.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"image\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"image\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.image.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.image.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                  </Card>\n                </>\n              )}\n\n              {(activeSection === \"cd\" || activeSection === \"general\") && (\n                <>\n                  <h2 className=\"title2\">Contact Details</h2>\n                  <Card>\n                    <CardContent>\n                      <Grid container spacing={2}>\n                        <Grid item xs={6} md={6} sx={6}>\n                          <TextField\n                            id=\"phone\"\n                            label=\"Phone\"\n                            placeholder=\"1234567890, 0987654321\"\n                            type=\"text\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.phone.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"phone\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"phone\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.phone.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.phone.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={6} md={6}>\n                          <TextField\n                            id=\"email\"\n                            label=\"Email\"\n                            type=\"email\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.email.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"email\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"email\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.email.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.email.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={6} md={6}>\n                          <TextField\n                            id=\"linkedIn\"\n                            label=\"LinkedIn Url\"\n                            type=\"text\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.linkedIn.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"linkedIn\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"linkedIn\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.linkedIn.errors.length ==\n                              0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.linkedIn.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={6} md={6}>\n                          <TextField\n                            id=\"location\"\n                            label=\"Present location eg. Bangalore\"\n                            type=\"text\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.location.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"location\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"location\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.location.errors.length ==\n                              0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.location.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                  </Card>\n                </>\n              )}\n\n              {activeSection === \"technicalSkills\" && (\n                <>\n                  {/* Technical skills - start */}\n                  <h2 className=\"title2\">Technical Skills</h2>\n                  <Card>\n                    <CardContent>\n                      {resumeFormFields?.technicalSkills?.skills?.map((ts, i) => {\n                        const tsr = resumeFormFields.technicalSkills.ratings[i];\n                        const tsdiv = (\n                          <Grid\n                            key={\"row_\" + i}\n                            style={addResumeCont.skillRowMargin}\n                            container\n                            spacing={2}\n                          >\n                            <Grid item xs={5} md={5} sx={5}>\n                              <TextField\n                                id={\"name_\" + (i + 1)}\n                                label={\"Skill Name \" + (i + 1)}\n                                type=\"text\"\n                                value={ts.value}\n                                onChange={(e) => {\n                                  addResumeForm.onFormFieldChange(e, [\n                                    \"technicalSkills\",\n                                    \"skills\",\n                                    i,\n                                  ]);\n                                }}\n                                onBlur={(e) => {\n                                  addResumeForm.onFormFieldChange(e, [\n                                    \"technicalSkills\",\n                                    \"skills\",\n                                    i,\n                                  ]);\n                                }}\n                                error={ts.errors.length == 0 ? false : true}\n                                helperText={ts.errors.join(\"\\n\")}\n                                variant=\"outlined\"\n                                fullWidth\n                              />\n                            </Grid>\n                            <Grid item xs={5} md={5} sx={5}>\n                              <div className=\"customInputBorder\">\n                                <div className=\"customInputBorderLabel\">\n                                  Rating({tsr.value})\n                                </div>\n                                <Slider\n                                  aria-label=\"Rating\"\n                                  defaultValue={1}\n                                  valueLabelDisplay=\"auto\"\n                                  marks\n                                  value={tsr.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"technicalSkills\",\n                                      \"ratings\",\n                                      i,\n                                    ]);\n                                  }}\n                                  min={1}\n                                  max={10}\n                                />\n                              </div>\n                            </Grid>\n                            <Grid item xs={2} md={2} sx={2}>\n                              <div style={addResumeCont.addDltBtn}>\n                                {i ===\n                                  resumeFormFields.technicalSkills.skills\n                                    .length -\n                                    1 && (\n                                  <Tooltip\n                                    title=\"Add New Skill\"\n                                    placement=\"bottom\"\n                                  >\n                                    <IconButton\n                                      onClick={() => {\n                                        onAdd([\"technicalSkills\"]);\n                                      }}\n                                    >\n                                      <AddCircleOutlineOutlinedIcon />\n                                    </IconButton>\n                                  </Tooltip>\n                                )}\n                                {resumeFormFields.technicalSkills.skills\n                                  .length > FormFieldService.getFieldsMinCount(\"technicalSkills\") && (\n                                  <Tooltip\n                                    title=\"Delete Skill\"\n                                    placement=\"bottom\"\n                                  >\n                                    <IconButton\n                                      onClick={() => {\n                                        onDlt([\"technicalSkills\"], i);\n                                      }}\n                                    >\n                                      <Delete />\n                                    </IconButton>\n                                  </Tooltip>\n                                )}\n                              </div>\n                            </Grid>\n                          </Grid>\n                        );\n                        return tsdiv;\n                      })}\n                    </CardContent>\n                  </Card>\n                  {/* Technical skills - end */}\n                </>\n              )}\n\n              {activeSection === \"professionalSkills\" && (\n                <>\n                  {/* Professional skills - start */}\n                  <h2 className=\"title2\">Professional Skills</h2>\n                  <Card>\n                    <CardContent>\n                      {resumeFormFields.professionalSkills.skills.map(\n                        (ps, i) => {\n                          const psr =\n                            resumeFormFields.professionalSkills.ratings[i];\n                          const psdiv = (\n                            <Grid\n                              key={\"row_\" + i}\n                              style={addResumeCont.skillRowMargin}\n                              container\n                              spacing={2}\n                            >\n                              <Grid item xs={5} md={5} sx={5}>\n                                <TextField\n                                  id={\"name_\" + (i + 1)}\n                                  label={\"Skill Name \" + (i + 1)}\n                                  type=\"text\"\n                                  value={ps.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"professionalSkills\",\n                                      \"skills\",\n                                      i,\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"professionalSkills\",\n                                      \"skills\",\n                                      i,\n                                    ]);\n                                  }}\n                                  error={ps.errors.length == 0 ? false : true}\n                                  helperText={ps.errors.join(\"\\n\")}\n                                  variant=\"outlined\"\n                                  fullWidth\n                                />\n                              </Grid>\n                              <Grid item xs={5} md={5} sx={5}>\n                                <div className=\"customInputBorder\">\n                                  <div className=\"customInputBorderLabel\">\n                                    Rating({psr.value})\n                                  </div>\n                                  <Slider\n                                    aria-label=\"Rating\"\n                                    defaultValue={1}\n                                    valueLabelDisplay=\"auto\"\n                                    marks\n                                    value={psr.value}\n                                    onChange={(e) => {\n                                      addResumeForm.onFormFieldChange(e, [\n                                        \"professionalSkills\",\n                                        \"ratings\",\n                                        i,\n                                      ]);\n                                    }}\n                                    min={1}\n                                    max={10}\n                                  />\n                                </div>\n                              </Grid>\n                              <Grid item xs={2} md={2} sx={2}>\n                                <div style={addResumeCont.addDltBtn}>\n                                  {i ===\n                                    resumeFormFields.professionalSkills.skills\n                                      .length -\n                                      1 && (\n                                    <Tooltip\n                                      title=\"Add New Skill\"\n                                      placement=\"bottom\"\n                                    >\n                                      <IconButton\n                                        onClick={() => {\n                                          onAdd([\"professionalSkills\"]);\n                                        }}\n                                      >\n                                        <AddCircleOutlineOutlinedIcon />\n                                      </IconButton>\n                                    </Tooltip>\n                                  )}\n                                  {resumeFormFields.professionalSkills.skills\n                                    .length > FormFieldService.getFieldsMinCount(\"professionalSkills\") && (\n                                    <Tooltip\n                                      title=\"Delete Skill\"\n                                      placement=\"bottom\"\n                                    >\n                                      <IconButton\n                                        onClick={() => {\n                                          onDlt([\"professionalSkills\"], i);\n                                        }}\n                                      >\n                                        <Delete />\n                                      </IconButton>\n                                    </Tooltip>\n                                  )}\n                                </div>\n                              </Grid>\n                            </Grid>\n                          );\n                          return psdiv;\n                        }\n                      )}\n                    </CardContent>\n                  </Card>\n                  {/* Professional skills - end */}\n                </>\n              )}\n\n              {activeSection === \"experiences\" && (\n                <>\n                  <h2 className=\"title2\">Experience </h2>\n\n                  {resumeFormFields.experiences.map((experience, i) => {\n                    const expDiv = (\n                      <Card key={\"exp_\" + i} className=\"card-container\">\n                        <CardContent>\n                          <div>\n                            <div className=\"snodiv\">\n                              {\"#EXPERIENCE : \" + (i + 1)}\n                            </div>\n                            <div>\n                              <Checkbox\n                                className=\"checkBox-pad\"\n                                {...{\n                                  inputProps: { \"aria-label\": \"Checkbox demo\" },\n                                }}\n                                sx={{ \"& .MuiSvgIcon-root\": { fontSize: 28 } }}\n                                checked={experience.current.value}\n                                onChange={(e) => {\n                                  addResumeForm.onFormFieldChange(e, [\n                                    \"experiences\",\n                                    i,\n                                    \"current\",\n                                  ]);\n                                  setTimeout(() => {\n                                    addResumeForm.onFormFieldChange(\n                                      e,\n                                      [\"experiences\", i, \"endDate\"],\n                                      e.target.checked\n                                    );\n                                  });\n                                }}\n                              />\n                              <span>Presently Working</span>\n                            </div>\n                            <Grid container spacing={2}>\n                              <Grid item xs={4} md={4} sx={4}>\n                                <TextField\n                                  id={\"title\" + (i + 1)}\n                                  label=\"Title\"\n                                  type=\"text\"\n                                  variant=\"outlined\"\n                                  fullWidth\n                                  value={experience.title.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"title\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"title\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.title.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.title.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n                              </Grid>\n\n                              <Grid item xs={4} md={4} sx={4}>\n                                <FormControl fullWidth>\n                                  <InputLabel id=\"demo-simple-select-label\">\n                                    Employment Type\n                                  </InputLabel>\n                                  <Select\n                                    labelId={\"employmentType_\" + (i + 1)}\n                                    id={\"employmentType_\" + (i + 1)}\n                                    value={experience.employmentType.value}\n                                    label=\"Employment Type\"\n                                    onChange={(e) => {\n                                      addResumeForm.onFormFieldChange(e, [\n                                        \"experiences\",\n                                        i,\n                                        \"employmentType\",\n                                      ]);\n                                    }}\n                                  >\n                                    <MenuItem value=\"fullTime\">\n                                      Full-time\n                                    </MenuItem>\n                                    <MenuItem value=\"partTime\">\n                                      Part-time\n                                    </MenuItem>\n                                    <MenuItem value=\"selfEmployed\">\n                                      Self-employed\n                                    </MenuItem>\n                                  </Select>\n                                </FormControl>\n                              </Grid>\n\n                              <Grid item xs={4} md={4} sx={4}>\n                                <TextField\n                                  id={\"company\" + (i + 1)}\n                                  label=\"Company\"\n                                  type=\"text\"\n                                  variant=\"outlined\"\n                                  fullWidth\n                                  value={experience.company.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"company\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"company\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.company.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.company.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n                              </Grid>\n\n                              <Grid item xs={4} md={4} sx={4}>\n                                <TextField\n                                  id={\"location\" + (i + 1)}\n                                  label=\"Location\"\n                                  type=\"text\"\n                                  variant=\"outlined\"\n                                  fullWidth\n                                  value={experience.location.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"location\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"location\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.location.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.location.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n                              </Grid>\n\n                              <Grid item xs={4} md={4}>\n                                <TextField\n                                  id={\"startDate\" + (i + 1)}\n                                  label=\"Start Date\"\n                                  type=\"date\"\n                                  sx={{ width: \"100%\" }}\n                                  InputLabelProps={{\n                                    shrink: true,\n                                  }}\n                                  value={experience.startDate.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"startDate\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"startDate\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.startDate.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.startDate.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n                              </Grid>\n\n                              <Grid item xs={4} md={4}>\n                                <TextField\n                                  id={\"ed\" + (i + 1)}\n                                  label=\"End Date\"\n                                  type=\"date\"\n                                  sx={{ width: \"100%\" }}\n                                  InputLabelProps={{\n                                    shrink: true,\n                                  }}\n                                  disabled={experience.endDate.disabled}\n                                  value={experience.endDate.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"endDate\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"endDate\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.endDate.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.endDate.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n\n                                {/* <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                    <DatePicker\n                                      label=\"Start Date\"\n                                      type=\"date\"\n                                      renderInput={(params) => <TextField {...params} />}\n                                    />\n                                  </LocalizationProvider>\n                                */}\n                              </Grid>\n\n                              <Grid item xs={11} md={11} sx={11}>\n                                <TextField\n                                  id={\"roles_\" + (i + 1)}\n                                  label={\"Roles & Responsibilities\"}\n                                  type=\"text\"\n                                  multiline\n                                  rows={3}\n                                  placeholder=\"a. Requirement Gathering &#13;&#10;b. Front-end Development &#13;&#10;c. API development\"\n                                  value={experience.roles.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"roles\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"roles\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.roles.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.roles.errors.join(\n                                    \"\\n\"\n                                  )}\n                                  variant=\"outlined\"\n                                  fullWidth\n                                />\n                              </Grid>\n\n                              <Grid item xs={1} md={1} sx={1}>\n                                {i ===\n                                  resumeFormFields.experiences.length - 1 && (\n                                  <Tooltip\n                                    title=\"Add New Skill\"\n                                    placement=\"bottom\"\n                                  >\n                                    <IconButton\n                                      onClick={() => {\n                                        onAdd(\n                                          [\"experiences\"],\n                                          FormFieldService.getFields(\"experiences\")\n                                        );\n                                      }}\n                                    >\n                                      <AddCircleOutlineOutlinedIcon />\n                                    </IconButton>\n                                  </Tooltip>\n                                )}\n                                {resumeFormFields.experiences.length >\n                                  FormFieldService.getFieldsMinCount(\"experiences\") && (\n                                  <Tooltip\n                                    title=\"Delete Skill\"\n                                    placement=\"bottom\"\n                                  >\n                                    <IconButton\n                                      onClick={() => {\n                                        onDlt([\"experiences\"], i);\n                                      }}\n                                    >\n                                      <Delete />\n                                    </IconButton>\n                                  </Tooltip>\n                                )}\n                              </Grid>\n                            </Grid>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                    return expDiv;\n                  })}\n                </>\n              )}\n\n              {activeSection === \"templates\" && (\n                <ResumeTemplate\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n              {activeSection === \"educations\" && (\n                <EduTemp\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n              {activeSection === \"projects\" && (\n                <ProjTemp\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n              {activeSection === \"languages\" && (\n                <LangTemp\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n              {activeSection === \"certificates\" && (\n                <CertTemp\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n            </form>\n          </Grid>\n        </Grid>\n        {activeSection !== tabs[tabs.length - 1] && ( \n        <Button\n          className=\"pr\"\n          style={addResumeCont.submitBtn}\n          size=\"large\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            onFormSubmit();\n          }}\n        >\n          NEXT\n        </Button>\n        )}\n        {(props?.resumeEditData?.id || activeSection == tabs[tabs.length - 1]) && (\n          <Button\n            className=\"pr\"\n            style={addResumeCont.submitBtn}\n            size=\"large\"\n            variant=\"contained\"\n            color=\"success\"\n            onClick={() => {\n              onFormSubmit(props?.resumeEditData?.id);\n            }}\n          >\n            SAVE\n          </Button>\n         )}\n      </div>\n    </Dialog>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Add,\n  Edit,\n  Delete,\n  Download,\n  Preview,\n  Upload,\n} from \"@mui/icons-material\";\nimport { IconButton, Tooltip } from \"@mui/material\";\nimport { AddResume } from \"../components/addResume/AddResume\";\nimport Button from \"@mui/material/Button\";\nimport { ResumeService } from \"../services/ResumeService\";\n\nexport const ListResume = (props) => {\n  const styles = {\n    addResume: {\n      boxSizing: \"border-box\",\n    },\n    listResume: {\n      marginTop: \"1em\",\n      boxSizing: \"border-box\",\n    },\n    listRowFirst: {\n      fontWeight: \"bold\",\n    },\n    listRow: {\n      borderBottom: \"1px solid #ccc\",\n      marginBottom: \"12px\",\n    },\n    listCol: {\n      width: \"calc(100% /3)\",\n      boxSizing: \"border-box\",\n      padding: \"5px\",\n    },\n  };\n\n  const [activeSection, setActiveSection] = useState(\"general\");\n  const [showAddResume, setShowAddResume] = useState(false);\n  const [resumeEditData, setResumeEditData] = useState();\n\n  const addResumme = () => {\n    console.log(\"addResumme btn clicked !!!\");\n    setActiveSection(\"general\");\n    setResumeEditData();\n    setShowAddResume(true);\n  };\n\n  const closeForm = () => {\n    setShowAddResume(false);\n    props.fetchResumes();\n  };\n\n  const deleteResume = (idx) => {\n    let confirmResult = window.confirm(`Are you sure to delete resule - ${props?.resumes?.[idx]?.general.resumeName}`);\n    if(confirmResult){\n      console.log(\n        \"deleteResume btn clicked :: idx :: \",\n        idx,\n        props?.resumes?.[idx]\n      );\n      ResumeService.dltResume(props?.resumes?.[idx]?.id);\n      props.fetchResumes();\n    }\n  };\n\n  const editResume = (idx) => {\n    console.log(\n      \"editResume btn clicked :: idx :: \",\n      idx,\n      props?.resumes?.[idx]\n    );\n    setActiveSection(\"general\");\n    setResumeEditData(props?.resumes?.[idx]);\n    setShowAddResume(true);\n  };\n\n  const downloadResume = (idx) => {\n    setResumeEditData(props?.resumes?.[idx]);\n\n    const blob = new Blob([JSON.stringify(resumeEditData)], {\n      type: \"text/json\",\n    });\n    const link = document.createElement(\"a\");\n\n    link.download = resumeEditData?.general?.resumeName + \".json\";\n    link.href = window.URL.createObjectURL(blob);\n    link.dataset.downloadurl = [\"text/json\", link.download, link.href].join(\n      \":\"\n    );\n\n    const evt = new MouseEvent(\"click\", {\n      view: window,\n      bubbles: true,\n      cancelable: true,\n    });\n\n    link.dispatchEvent(evt);\n    link.remove();\n  };\n\n  const uploadResumme = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    \n    reader.readAsText(e.target.files[0]);\n\n    reader.onload = (e) => {\n      const text = e.target.result;\n      console.log(text);\n      ResumeService.uploadResume(JSON.parse(text));\n      props.fetchResumes();\n    };\n\n    reader.onerror = function () {\n      console.log(e.target.error);\n    };\n  };\n\n  const changeTemplate = (idx) => {\n    setResumeEditData(props?.resumes?.[idx]);\n    setActiveSection(\"templates\");\n    setShowAddResume(true);\n  };\n\n  const fileUpload = () => {\n    document.getElementById(\"File1\").click();\n  }\n  return (\n    <>\n      <div style={styles.addResume}>\n        {showAddResume && (\n          <AddResume\n            activeSection={activeSection}\n            resumeEditData={resumeEditData}\n            closeForm={closeForm}\n          />\n        )}\n        {/* <button className=\"addBtn pr\" onClick={()=>{addResumme()}}>ADD</button> */}\n\n        <Button\n          className=\"pr\"\n          variant=\"contained\"\n          color=\"success\"\n          onClick={() => {\n            addResumme();\n          }}\n        >\n          <Add /> &nbsp; ADD\n        </Button>\n\n        <Button\n          className=\"pr mr5\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            fileUpload();\n          }}\n        >\n          <Upload /> &nbsp; Upload\n        </Button>\n\n        <input\n          class=\"pr mr5\"\n          id=\"File1\"\n          type=\"file\"\n          onChange={(e) => {\n            uploadResumme(e);\n          }}\n        />\n      </div>\n      <div className=\"clear\"></div>\n      <div style={styles.listResume}>\n        <div className=\"page-cont\">\n          <hr />\n          <div style={styles.listRowFirst}>\n            <div className=\"fl\" style={styles.listCol}>\n              Resume Name\n            </div>\n            <div className=\"fl\" style={styles.listCol}>\n              Role\n            </div>\n            <div className=\"fl\" style={styles.listCol}>\n              Actions\n            </div>\n            <div className=\"clear\"></div>\n          </div>\n          <hr />\n          {props?.resumes?.map((r, i) => {\n            return (\n              <div key={\"resume\" + i} style={styles.listRow}>\n                <div className=\"fl\" style={styles.listCol}>\n                  {r?.general?.resumeName}\n                </div>\n                <div className=\"fl\" style={styles.listCol}>\n                  {r?.general?.title}\n                </div>\n                <div className=\"fl\" style={styles.listCol}>\n                  <Tooltip title=\"Edit\" placement=\"bottom\">\n                    <IconButton\n                      onClick={() => {\n                        editResume(i);\n                      }}\n                    >\n                      <Edit />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Delete\" placement=\"bottom\">\n                    <IconButton\n                      onClick={() => {\n                        deleteResume(i);\n                      }}\n                    >\n                      <Delete />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Download\" placement=\"bottom\">\n                    <IconButton\n                      onClick={() => {\n                        downloadResume(i);\n                      }}\n                    >\n                      <Download />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Change Template\" placement=\"bottom\">\n                    <IconButton\n                      onClick={() => {\n                        changeTemplate(i);\n                      }}\n                    >\n                      <Preview />\n                    </IconButton>\n                  </Tooltip>\n                </div>\n                <div className=\"clear\"></div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { ListResume } from \"../components/ListResume\";\nimport { ResumeService } from \"../services/ResumeService\";\n\nexport const ResumeFactory = () => {\n  const [resumes, setResumes] = useState([]);\n\n  const fetchResumes = () => {\n    const resumes = ResumeService.getResumes();\n    console.log(\"fetchResumes :: resumes  ::\", resumes);\n    setResumes(resumes);\n  };\n\n  // fetch resumes\n  useEffect((e) => {\n    fetchResumes();\n  }, []);\n\n  return (\n    <div className=\"main-cont\">\n      <ListResume resumes={resumes} fetchResumes={fetchResumes} />\n    </div>\n  );\n};\n","import logo from './logo.svg';\nimport './App.css';\nimport {Header} from './components/Header';\nimport {ResumeFactory} from './pages/ResumeFactory';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <ResumeFactory />\n    </>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}