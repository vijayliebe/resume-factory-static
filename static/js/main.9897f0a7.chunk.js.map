{"version":3,"sources":["services/FormService.js","logo.svg","components/Header.js","services/ResumeService.js","components/addResume/resumeTemplate/allTemplates/professional/ProfessionalTemp.js","components/addResume/resumeTemplate/allTemplates/modern/ModernTemp.js","components/addResume/resumeTemplate/ResumePreview.js","components/addResume/resumeTemplate/ResumeTemplate.js","services/FormFieldsService.js","components/addResume/EduTemp.js","components/addResume/ProjTemp.js","components/addResume/LangTemp.js","components/addResume/CertTemp.js","components/addResume/AddResume.js","components/ListResume.js","pages/ResumeFactory.js","App.js","reportWebVitals.js","index.js"],"names":["resumeFormFields","setResumeFormFields","Header","styles","main","borderBottom","title","fontSize","marginLeft","style","ResumeService","getResumes","resumes","localStorage","getItem","JSON","parse","getResumeById","id","filter","r","saveResume","data","Date","now","push","setItem","stringify","editResume","map","dltResume","uploadResume","Array","isArray","ProfessionalTemp","props","ModernTemp","useState","professionalSkills","educations","languages","projects","sectionPosition","setSectionPosition","changeSectionPosition","sectionName","position","copy","transformDate","dtStr","format","date","m","getDate","getMonth","y","getFullYear","Button","className","size","variant","color","onClick","window","print","icon","faPrint","resumeData","general","name","about","faCircleArrowRight","experiences","exp","class","startDate","current","endDate","company","location","roles","split","role","faAngleRight","edu","degree","school","slice","join","proj","i","url","l","desc","tech","src","image","faPhone","phone","faEnvelope","email","linkedIn","faMapMarker","technicalSkills","ratings","rating","skill","skills","faCircle","faCircleReg","lang","ResumePreview","addResumeForm","getValue","selectedResumeTemp","Transition","React","forwardRef","ref","Slide","direction","ResumeTemplate","resumeEditData","onAdd","onDlt","handleClose","setShowPreview","_resumeTemplates","showPreview","setTempleteInResumeObj","console","log","copyResumeFormFields","setState","template","useEffect","e","Card","CardContent","Grid","container","spacing","rt","idx","item","xs","md","sx","alt","loading","RadioButtonChecked","RadioButtonUnchecked","Dialog","fullScreen","open","onClose","TransitionComponent","IconButton","edge","validateInput","value","validators","errors","validator","error","undefined","includes","re","RegExp","pattern","test","errorMessage","generalFieldObj","dirty","FormService","init","rff","srff","isFormValid","formName","valid","formCopy","iterate","formObj","v","Object","keys","length","setValue","objName","dataObj","dataValue","disabled","getGeneralFieldObj","gfo","d","getDateString","onFormFieldChange","formNames","inputValue","target","type","checked","formField","getState","required","fieldsMinCount","certificates","fields","resumeName","fill","employmentType","field","grade","org","cid","getFields","FormFieldService","EduTemp","TextField","label","onChange","onBlur","helperText","fullWidth","placeholder","width","Tooltip","placement","Delete","ProjTemp","p","Checkbox","inputProps","setTimeout","multiline","rows","LangTemp","ts","tsr","Slider","defaultValue","valueLabelDisplay","marks","min","max","CertTemp","cert","AddResume","addResumeCont","background","boxSizing","padding","sectionsCont","marginTop","paddingLeft","boxShadow","clipPath","sectionsRCont","sectionsContLiUl","listStyleType","sectionsContLi","textTransform","cursor","form","height","overflowY","addDltBtn","paddingTop","skillRowMargin","marginBottom","expRowMargin","paddingBottom","submitBtn","marginRight","float","tabList","templates","tabs","activeSection","setActiveSection","resumeFormFieldsObj","fieldsmapObj","tsList","index","splice","onFormSubmit","payload","closeForm","errorTab","tabErrors","tab","indexOf","ps","psr","experience","FormControl","InputLabel","Select","labelId","MenuItem","InputLabelProps","shrink","ListResume","addResume","listResume","listRowFirst","fontWeight","listRow","listCol","showAddResume","setShowAddResume","setResumeEditData","fetchResumes","Add","document","getElementById","click","Upload","preventDefault","reader","FileReader","readAsText","files","onload","text","result","onerror","uploadResumme","Edit","confirm","deleteResume","blob","Blob","link","createElement","download","href","URL","createObjectURL","dataset","downloadurl","evt","MouseEvent","view","bubbles","cancelable","dispatchEvent","remove","downloadResume","Download","changeTemplate","Preview","ResumeFactory","setResumes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9897f0a7.chunk.js","sourcesContent":["let resumeFormFields, setResumeFormFields;\n\n/* validation - start */\nconst validateInput = (value, validators) => {\n  let errors = [];\n\n  validators?.map((validator) => {\n    let error;\n    switch (validator.name) {\n      case \"required\":\n        error = [\"\", null, undefined].includes(value);\n        break;\n\n      case \"url\":\n      case \"email\":\n        const re = new RegExp(validator.pattern, \"i\");\n        error = ![\"\", null, undefined].includes(value) ? !re.test(value) : \"\";\n        break;\n    }\n    if (error) errors.push(validator.errorMessage);\n  });\n  return errors;\n};\n\nconst validators = {\n  required: { name: \"required\", errorMessage: \"Required\" },\n  email: {\n    name: \"email\",\n    pattern:\n      \"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])+\",\n    errorMessage: \"Invalid email\",\n  },\n  url: {\n    name: \"url\",\n    pattern:\n      \"(https?://(?:www.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9].[^s]{2,}|www.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9].[^s]{2,}|https?://(?:www.|(?!www))[a-zA-Z0-9]+.[^s]{2,}|www.[a-zA-Z0-9]+.[^s]{2,})\",\n    errorMessage: \"Invalid Url\",\n  },\n};\n/* validation - end */\n\n/* form operations - start */\n\n\n\nconst getDateString = (dtStr) => {\n  const date = (dtStr && dtStr !== \"undefined\") ? new Date(dtStr) : new Date();\n  const d = date.getDate(),\n    m = date.getMonth() + 1,\n    y = date.getFullYear();\n  const dateString =\n    \"\" + y + \"-\" + (m <= 9 ? \"0\" + m : m) + \"-\" + (d <= 9 ? \"0\" + d : d);\n  return dateString;\n}\n\nconst generalFieldObj = {\n  value: \"\",\n  dirty: false,\n  validators: [],\n  errors: [],\n};\nconst getGeneralFieldObj = (validators, value) => {\n  let gfo = JSON.parse(JSON.stringify(generalFieldObj));\n  gfo.value = value ?  (typeof(value) == \"string\" && value.includes(\"dateString\")) ? getDateString(value.split(\"|\")[1]) : value : \"\";\n  gfo.validators = validators;\n  return gfo;\n};\n\nconst onFormFieldChange = (e, formNames, disabled) => {\n  const inputValue = e.target\n    ? e.target.type === \"checkbox\"\n      ? e.target.checked\n      : e.target.value\n    : e;\n  let copyResumeFormFields = JSON.parse(JSON.stringify(resumeFormFields));\n  let formField = copyResumeFormFields;\n  for (let fn of formNames) {\n    formField = formField[fn];\n  }\n\n  if(disabled === undefined){\n    // console.log(\"formNames ::\", formNames);\n    // console.log(\"formField ::\", formField);\n\n    const errors = validateInput(inputValue, formField.validators);\n    formField.value = inputValue;\n    \"dirty\" in formField ? (formField.dirty = true) : delete formField.dirty;\n    formField.errors = errors;\n  }\n\n  formField.disabled = disabled;\n\n  //console.log(\"onGeneralFieldChange :: formField ::\", formField);\n  //console.log(\"onGeneralFieldChange :: copyResumeFormFields ::\", copyResumeFormFields);\n  //console.log(\"--------------------------------------------------------\");\n  setResumeFormFields(copyResumeFormFields);\n};\n\nconst init = (rff, srff) => {\n  resumeFormFields = rff;\n  setResumeFormFields = srff;\n}\nconst setState = (data) => {\n  setResumeFormFields(data);\n}\n\nconst getState = () => {\n  return resumeFormFields;\n}\n/* form operations - end */\n\nconst isFormValid = (formName) => {\n  let valid =  true;\n  let formCopy = JSON.parse(JSON.stringify(resumeFormFields));\n\n  let iterate = (formObj) => {\n    for(let i in formObj){\n      let v = formObj[i];\n      if(typeof formObj[i] === \"object\" && Object.keys(formObj[i]).includes(\"dirty\")){\n        //formObj[i] = formObj[i].value;\n        const errors = validateInput(formObj[i].value, formObj[i].validators);\n        formObj[i].errors = errors;\n        if(errors.length){\n          valid = false;\n        }\n      } else if(typeof v === \"object\") {\n        iterate(v);\n      } else {\n        console.log(\"v :: \", v);\n      }\n    }\n  }\n  iterate(formCopy[formName] || formCopy);\n  // console.log(\"isFormValid :: formName ::\", formName);\n  // console.log(\"isFormValid :: formCopy ::\", JSON.parse(JSON.stringify(formCopy)));\n  setState(formCopy);\n  return valid;\n};\n\nconst getValue = () => {\n  console.log(\"getValue :: resumeFormFields ::\", resumeFormFields);\n  let formCopy = JSON.parse(JSON.stringify(resumeFormFields));\n  let iterate = (formObj) => {\n    for(let i in formObj){\n      let v = formObj[i];\n      if(typeof formObj[i] === \"object\" && Object.keys(formObj[i]).includes(\"dirty\")){\n        formObj[i] = formObj[i].value;\n      } else if(typeof v === \"object\") {\n        iterate(v);\n      } else {\n        console.log(\"v :: \", v);\n      }\n    }\n  }\n  iterate(formCopy);\n  return formCopy;\n}\n\nconst setValue = (resumeEditData, objName) => {\n  console.log(\"setValue :: resumeFormFields ::\", resumeFormFields);\n  let formCopy = JSON.parse(JSON.stringify(resumeFormFields));\n  let dataCopy = JSON.parse(JSON.stringify(resumeEditData));\n  let iterate = (formObj, dataObj) => {\n    for(let i in formObj){\n      let v = formObj[i];\n      let dataValue = dataObj[i];\n      if(dataValue){\n        if(typeof formObj[i] === \"object\" && Object.keys(formObj[i]).includes(\"dirty\")){\n          //formObj[i] = formObj[i].value;\n          if(formObj['current'] && i === \"endDate\") formObj[i].disabled = true;\n          formObj[i].value = dataObj[i];\n        } else if(typeof v === \"object\") {\n          iterate(v, dataValue);\n        } else {\n          console.log(\"v :: \", v);\n          console.log(\"dataValue :: \", dataValue);\n        }\n      }\n    }\n  }\n  iterate(formCopy, dataCopy);\n  console.log(\"setValue :: formCopy ::\", formCopy);\n\n  setState(formCopy);\n  //return formCopy;\n}\n\nexport const FormService = {\n  init,\n  isFormValid,\n  getValue,\n  setValue,\n  getGeneralFieldObj,\n  onFormFieldChange,\n  setState,\n  getState,\n  validators,\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\nexport const Header = () => {\n    const styles = {\n        main: {\n            borderBottom: \"2px solid #eee\"\n        },\n        title: {\n            fontSize: \"25px\",\n            marginLeft: \"10px\"\n        }\n    }\n    return (\n        <header style={styles.main}>\n            <h1 style={styles.title}>Resume Factory</h1>  \n            \n        </header>\n    )\n}","\nexport const ResumeService = (() => {\n    \n    const getResumes = () => {\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        return resumes;\n    }\n    \n    const getResumeById = (id) => {\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        return resumes.filter((r)=> {return r.id = id;});\n    }\n\n    const saveResume = (data) => {\n        data['id'] = Date.now();\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        resumes.push(data);\n        localStorage.setItem('resumes', JSON.stringify(resumes));\n        return data;\n    }\n\n    const editResume = (id, data) => {\n        data.id = id;\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        resumes = resumes.map((r)=> {\n            if(id == r.id){\n                r = data;\n            }\n            return r;\n        });\n        localStorage.setItem('resumes', JSON.stringify(resumes));\n    }\n\n    const dltResume = (id) => {\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n        resumes = resumes.filter((r)=> {\n            if(id !== r.id){\n                return r;\n            } \n        });\n        localStorage.setItem('resumes', JSON.stringify(resumes));\n    }\n\n    const uploadResume = (data) => {\n        let resumes = localStorage.getItem('resumes') || \"[]\";\n        resumes = JSON.parse(resumes);\n\n        if(Array.isArray(data)){\n          resumes = [...resumes, ...data];\n        } else {\n          resumes.push(data);\n        }\n\n        localStorage.setItem('resumes', JSON.stringify(resumes));\n        return resumes;\n    }\n\n    \n    return {\n        getResumes,\n        getResumeById,\n        saveResume,\n        editResume,\n        dltResume,\n        uploadResume\n    }\n})()","import React, {useState} from \"react\";\n\nexport const ProfessionalTemp = (props) => {\n\n\n    return (\n        <>Professional Resume Template</>\n    );\n}","import React, { useState } from \"react\";\nimport \"./modernResumeTemp.scss\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCircleArrowRight,\n  faEnvelope,\n  faPhone,\n  faMapMarker,\n  faCircle,\n  faAngleRight,\n  faPrint,\n  faBell,\n  faBiking,\n  faHome,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { faCircle as faCircleReg } from \"@fortawesome/free-regular-svg-icons\";\n\nexport const ModernTemp = (props) => {\n  const defaultSectionPositions = {\n    professionalSkills: \"r\",\n    educations: \"r\",\n    languages: \"r\",\n    projects: \"b\",\n  };\n  const [sectionPosition, setSectionPosition] = useState(\n    defaultSectionPositions\n  );\n  const onPrintPreviewBtnClick = () => {\n    window.print();\n  };\n\n  const changeSectionPosition = (sectionName, position) => {\n    let copy = JSON.parse(JSON.stringify(sectionPosition));\n    copy[sectionName] = position;\n    setSectionPosition(copy);\n  };\n\n  const transformDate = (dtStr, format) => {\n    let date = dtStr ? new Date(dtStr) : new Date();\n    const monthList = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const d = date.getDate(),\n    m = date.getMonth() + 1,\n    y = date.getFullYear();\n\n    return (monthList[m - 1]+\" \"+y);\n  }\n\n  return (\n    <>\n      <h4>Modern Resume</h4>\n\n      {/* \n      <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\"/>\n      <FontAwesomeIcon icon={faEnvelope} />\n      <FontAwesomeIcon icon={faPhone} />\n      <FontAwesomeIcon icon={faMapMarker} />\n      <FontAwesomeIcon icon={faCircle} />\n      <FontAwesomeIcon icon={faCircleReg} />\n      <FontAwesomeIcon icon={faAngleRight} />  \n      <FontAwesomeIcon icon={faPrint} />  \n      */}\n\n      <Button\n        className=\"print-btn\"\n        size=\"large\"\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          onPrintPreviewBtnClick();\n        }}\n      >\n        <FontAwesomeIcon icon={faPrint} /> &nbsp; PRINT\n      </Button>\n\n      {/* <code>{JSON.stringify(props)}</code>  */}\n      <hr />\n\n      <div id=\"section-to-print\" className=\"resume-temp-main-cont\">\n        <div className=\"left-cont\">\n          <div className=\"head\">\n            <div className=\"title\">{props.resumeData.general.name}</div>\n          </div>\n\n          <div className=\"desc\">\n            <div className=\"nm\"></div>\n            <div className=\"designation\">{props.resumeData.general.title}</div>\n            <div className=\"description\">{props.resumeData.general.about}</div>\n          </div>\n\n          <div className=\"experience\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n              &nbsp; PROFESSIONAL EXPERIENCE\n            </div>\n            {props.resumeData.experiences.map((exp) => {\n              const expHtml = (\n                <div key={exp.company} className=\"experience-item\">\n                  <div className=\"title1\">\n                    <span className=\"exp-desig\">{exp.title}, </span>{\" \"}\n                    <span class=\"exp-duration\">\n                      {transformDate(exp.startDate)} - {exp.current ? \"Present\" : transformDate(exp.endDate)}\n                    </span>\n                  </div>\n                  <div className=\"title2\">\n                    <span className=\"comp\">{exp.company}, </span>\n                    <span className=\"comp-addr\">{exp.location}</span>\n                  </div>\n                  <div className=\"resp\">\n                    {exp.roles.split(\"\\n\").map((role) => {\n                      return (\n                        <>\n                          {\" \"}\n                          <div className=\"respItem\">\n                            {\" \"}\n                            <FontAwesomeIcon icon={faAngleRight} /> {role}\n                          </div>{\" \"}\n                        </>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n              return expHtml;\n            })}\n          </div>\n          {sectionPosition.educations == \"l\" ? (\n            <div className=\"education m-t\">\n              <div className=\"cont-title\">\n                <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n                &nbsp;EDUCATION\n                <button\n                  className=\"position-btn fr\"\n                  onClick={() => {\n                    changeSectionPosition(\"educations\", \"r\");\n                  }}\n                >\n                  Move Right\n                </button>\n              </div>\n              {props.resumeData.educations.map((edu) => {\n                const eduHtml = (\n                  <>\n                    <div className=\"edu-item\">\n                      <div className=\"line\">\n                        <div className=\"degree\">{edu.degree}</div>\n                        <div>\n                          <span className=\"insti\">\n                            {edu.school.split(\",\")[0]}\n                          </span>\n                          <span className=\"add\">\n                            ,{edu.school.split(\",\").slice(1).join(\",\")}\n                          </span>\n                        </div>\n                        <div className=\"year\">\n                          {transformDate(edu.startDate)} - {transformDate(edu.endDate)}\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                );\n                return eduHtml;\n              })}\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          {sectionPosition.projects == \"l\" ? (\n            <div className=\"projects proj-item-l\">\n              <div className=\"cont-title\">\n                <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" /> &nbsp;\n                PROJECTS\n                <button\n                  className=\"position-btn fr\"\n                  onClick={() => {\n                    changeSectionPosition(\"projects\", \"b\");\n                  }}\n                >\n                  Move Bottom\n                </button>\n              </div>\n\n              {props.resumeData.projects.map((proj, i) => {\n                const projHtml = (\n                  <>\n                    <div className=\"proj-item\">\n                      {/* <div className=\"left\"> */}\n                      <div className=\"caption\">\n                        <div className=\"name\">\n                          {i + 1}. {proj.company}\n                        </div>\n                        {proj.url.split(\",\").map((l) => {\n                          return <div className=\"link\">{l}</div>;\n                        })}\n                      </div>\n\n                      <div className=\"desc-cont m-t\">\n                        <div className=\"desc-title\">Description</div>\n                        <div className=\"desc\">{proj.desc}</div>\n                      </div>\n\n                      <div className=\"tect-cont m-t\">\n                        <div className=\"tech-title\">Technologies</div>\n                        <div className=\"tech\">\n                          <span>{proj.tech} </span>\n                        </div>\n                      </div>\n                      {/* </div>\n                      <div className=\"right\"> */}\n                      <div className=\"roles-title m-t\">\n                        Roles & Responsibilities\n                      </div>\n\n                      {proj.roles.split(\"\\n\").map((role) => {\n                        return (\n                          <>\n                            {\" \"}\n                            <div className=\"role\">\n                              {\" \"}\n                              <FontAwesomeIcon icon={faAngleRight} /> {role}\n                            </div>{\" \"}\n                          </>\n                        );\n                      })}\n                      {/* </div> */}\n                      <div className=\"clear\"></div>\n                    </div>\n                  </>\n                );\n                return projHtml;\n              })}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n\n        <div className=\"right-cont\">\n          <div className=\"photo\">\n            <img src={props.resumeData.general.image} />\n          </div>\n\n          <div className=\"contact-details m-t\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" /> &nbsp;\n              CONTACT DETAILS\n            </div>\n\n            <div className=\"contact-item\">\n              <div className=\"item-left\">\n                <FontAwesomeIcon icon={faPhone} size=\"lg\" />\n              </div>\n              <div className=\"item-right\">{props.resumeData.general.phone}</div>\n              <div className=\"clear\"></div>\n            </div>\n\n            <div className=\"contact-item\">\n              <div className=\"item-left\">\n                <FontAwesomeIcon icon={faEnvelope} size=\"lg\" />\n              </div>\n              <div className=\"item-right\">{props.resumeData.general.email}</div>\n              <div className=\"clear\"></div>\n            </div>\n\n            <div className=\"contact-item\">\n              <div className=\"item-left\">\n                <img\n                  className=\"linkedin-icon-size\"\n                  src=\"https://cdn-icons-png.flaticon.com/512/61/61109.png\"\n                />\n              </div>\n              <div className=\"item-right\">\n                {props.resumeData.general.linkedIn}\n              </div>\n              <div className=\"clear\"></div>\n            </div>\n\n            <div className=\"contact-item\">\n              <div className=\"item-left\">\n                <FontAwesomeIcon icon={faMapMarker} size=\"lg\" />\n              </div>\n              <div className=\"item-right\">\n                {props.resumeData.general.location}\n              </div>\n              <div className=\"clear\"></div>\n            </div>\n          </div>\n\n          <div className=\"technical-details m-t\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n              &nbsp;TECHNICAL SKILLS\n            </div>\n\n            {props.resumeData.technicalSkills.ratings.map((rating, i) => {\n              const skill = props.resumeData.technicalSkills.skills[i];\n              const tsHtml = (\n                <>\n                  <div className=\"skill\">\n                    <div className=\"left\">{skill}</div>\n                    <div className=\"right\">\n                      {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1].map((r) => {\n                        const ratingHtml = (\n                          <>\n                            {r <= rating ? (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircle}\n                              />\n                            ) : (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircleReg}\n                              />\n                            )}\n                          </>\n                        );\n                        return ratingHtml;\n                      })}\n                    </div>\n                    <div className=\"clear\"></div>\n                  </div>\n                </>\n              );\n              return tsHtml;\n            })}\n          </div>\n\n          <div className=\"personal-details m-t\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n              &nbsp;PERSONAL SKILLS\n            </div>\n\n            {props.resumeData.professionalSkills.ratings.map((rating, i) => {\n              const skill = props.resumeData.professionalSkills.skills[i];\n              const tsHtml = (\n                <>\n                  <div className=\"skill\">\n                    <div className=\"left\">{skill}</div>\n                    <div className=\"right\">\n                      {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1].map((r) => {\n                        const ratingHtml = (\n                          <>\n                            {r <= rating ? (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircle}\n                              />\n                            ) : (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircleReg}\n                              />\n                            )}\n                          </>\n                        );\n                        return ratingHtml;\n                      })}\n                    </div>\n                    <div className=\"clear\"></div>\n                  </div>\n                </>\n              );\n              return tsHtml;\n            })}\n          </div>\n\n          <div className=\"language m-t\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n              &nbsp;LANGUAGE\n            </div>\n\n            {props.resumeData.languages.ratings.map((rating, i) => {\n              const lang = props.resumeData.languages.lang[i];\n              const tsHtml = (\n                <>\n                  <div className=\"skill\">\n                    <div className=\"left\">{lang}</div>\n                    <div className=\"right\">\n                      {[10, 9, 8, 7, 6, 5, 4, 3, 2, 1].map((r) => {\n                        const ratingHtml = (\n                          <>\n                            {r <= rating ? (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircle}\n                              />\n                            ) : (\n                              <FontAwesomeIcon\n                                className=\"circle-position\"\n                                icon={faCircleReg}\n                              />\n                            )}\n                          </>\n                        );\n                        return ratingHtml;\n                      })}\n                    </div>\n                    <div className=\"clear\"></div>\n                  </div>\n                </>\n              );\n              return tsHtml;\n            })}\n          </div>\n          {sectionPosition.educations == \"r\" ||\n          !sectionPosition ||\n          !sectionPosition?.educations ? (\n            <div className=\"edu m-t\">\n              <div className=\"cont-title\">\n                <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" />\n                &nbsp;EDUCATION\n                <button\n                  className=\"position-btn fr\"\n                  onClick={() => {\n                    changeSectionPosition(\"educations\", \"l\");\n                  }}\n                >\n                  Move Left\n                </button>\n              </div>\n              {props.resumeData.educations.map((edu) => {\n                const eduHtml = (\n                  <>\n                    <div className=\"edu-item\">\n                      <div className=\"line\">\n                        <span className=\"degree\">{edu.degree}</span>\n                        <span className=\"year\">\n                          ({transformDate(edu.startDate)} - {transformDate(edu.endDate)})\n                        </span>\n                      </div>\n\n                      <div className=\"line\">\n                        <span className=\"insti\">\n                          {edu.school.split(\",\")[0]}\n                        </span>\n                        <span className=\"add\">\n                          ,{edu.school.split(\",\").slice(1).join(\",\")}\n                        </span>\n                      </div>\n                    </div>\n                  </>\n                );\n                return eduHtml;\n              })}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n\n        <div className=\"clear\"></div>\n\n        {sectionPosition.projects == \"b\" ? (\n          <div className=\"projects\">\n            <div className=\"cont-title\">\n              <FontAwesomeIcon icon={faCircleArrowRight} size=\"lg\" /> &nbsp;\n              PROJECTS\n              <button\n                className=\"position-btn fr\"\n                onClick={() => {\n                  changeSectionPosition(\"projects\", \"l\");\n                }}\n              >\n                Move Left\n              </button>\n            </div>\n\n            {props.resumeData.projects.map((proj, i) => {\n              const projHtml = (\n                <>\n                  <div className=\"proj-item\">\n                    <div className=\"left\">\n                      <div className=\"caption\">\n                        <div className=\"name\">\n                          {i + 1}. {proj.company}\n                        </div>\n                        {proj.url.split(\",\").map((l) => {\n                          return <div className=\"link\">{l}</div>;\n                        })}\n                      </div>\n\n                      <div className=\"desc-cont m-t\">\n                        <div className=\"desc-title\">Description</div>\n                        <div className=\"desc\">{proj.desc}</div>\n                      </div>\n\n                      <div className=\"tect-cont m-t\">\n                        <div className=\"tech-title\">Technologies</div>\n                        <div className=\"tech\">\n                          <span>{proj.tech} </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"right\">\n                      <div className=\"roles-title\">\n                        Roles & Responsibilities\n                      </div>\n\n                      {proj.roles.split(\"\\n\").map((role) => {\n                        return (\n                          <>\n                            {\" \"}\n                            <div className=\"role\">\n                              {\" \"}\n                              <FontAwesomeIcon icon={faAngleRight} /> {role}\n                            </div>{\" \"}\n                          </>\n                        );\n                      })}\n                    </div>\n                    <div className=\"clear\"></div>\n                  </div>\n                </>\n              );\n              return projHtml;\n            })}\n          </div>\n        ) : (\n          \"\"\n        )}\n        <div className=\"clear\"></div>\n\n        <div className=\"footer\">\n          <div className=\"left\">\n            <div>Date : {transformDate()}</div>\n            <div className=\"m-t\">{props.resumeData.general.location}</div>\n          </div>\n          <div className=\"right\">\n            <div className=\"sign\">{props.resumeData.general.name}</div>\n          </div>\n          <div className=\"clear\"></div>\n        </div>\n\n        <div className=\"clear\"></div>\n      </div>\n    </>\n  );\n};\n","import React, {useState} from \"react\";\nimport { ProfessionalTemp } from \"./allTemplates/professional/ProfessionalTemp\";\nimport { ModernTemp } from \"./allTemplates/modern/ModernTemp\";\n\nexport const ResumePreview = (props) => {\n    const resumeData = props.addResumeForm.getValue()\n    return (\n        <div className=\"previewResumeCont\">\n            <h1 className=\"h2Title\">Resume Preview</h1>\n          {/* <div>{JSON.stringify(props.selectedResumeTemp)}</div>\n            <div>{JSON.stringify(props.selectedResumeTemp.name)}</div> */}\n\n           {props.selectedResumeTemp.name == \"Professional\" && <ProfessionalTemp resumeData={resumeData}/>}\n           {props.selectedResumeTemp.name === \"Modern\" && <ModernTemp resumeData={resumeData}/>}\n        </div>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport \"./resumeTemp.css\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\n\nimport {\n  Add,\n  Delete,\n  CheckCircle,\n  RadioButtonUnchecked,\n  RadioButtonChecked,\n} from \"@mui/icons-material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { ResumePreview } from \"./ResumePreview\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"left\" ref={ref} {...props} />;\n});\n\nexport const ResumeTemplate = ({\n  addResumeForm,\n  resumeFormFields,\n  onAdd,\n  onDlt,\n  resumeEditData\n}) => {\n  const handleClose = () => {\n    setShowPreview(false);\n  };\n\n  const _resumeTemplates = [\n    // {\n    //   id: 0,\n    //   name: \"Professional\",\n    //   image: \"resume_temp_1.jpeg\",\n    // },\n    {\n      id: 1,\n      name: \"Modern\",\n      image: \"resume_temp_2.jpeg\",\n    },\n  ];\n\n  const [showPreview, setShowPreview] = useState(false);\n\n  const selectResumeTemp = (idx) => {\n    console.log(\"selectResumeTemp :: idx ::\", idx);\n    console.log(\n      \"selectResumeTemp :: _resumeTemplates[idx] ::\",\n      _resumeTemplates[idx]\n    );\n    setTempleteInResumeObj(_resumeTemplates[idx]);\n  };\n\n  const onPreviewBtnClick = () => {\n    setShowPreview(true);\n  };\n\n  const setTempleteInResumeObj = (selectedResumeTemp) => {\n    console.log(\n      \"setTempleteInResumeObj :: selectedResumeTemp ::\",\n      selectedResumeTemp\n    );\n    let copyResumeFormFields = JSON.parse(JSON.stringify(resumeFormFields));\n    copyResumeFormFields[\"template\"] = selectedResumeTemp;\n    addResumeForm.setState(copyResumeFormFields);\n    console.log(\"resumeFormFields.template ::\", resumeFormFields.template);\n  };\n\n  useEffect((e) => {\n    if (resumeFormFields?.template?.id) return;\n    resumeEditData?.template?.id ? setTempleteInResumeObj(resumeEditData?.template) : setTempleteInResumeObj(_resumeTemplates[0]);\n  }, []);\n\n  return (\n    <>\n      <h2 className=\"title2\">Templates</h2>\n      <Card>\n        <CardContent className=\"p-rel\">\n          <Grid className=\"contRowMargin\" container spacing={2}>\n            {_resumeTemplates?.map((rt, i) => {\n              return (\n                <Grid\n                  key={\"rt\" + i}\n                  onClick={() => {\n                    selectResumeTemp(i);\n                  }}\n                  className={\n                    \"resume-temp-grid \" +\n                    (rt.id === resumeFormFields.template?.id && \"active\")\n                  }\n                  item\n                  xs={2}\n                  md={2}\n                  sx={2}\n                >\n                  <img\n                    className=\"temp-img\"\n                    src={\"images/\" + rt.image}\n                    alt={rt.name}\n                    loading=\"lazy\"\n                  />\n\n                  <div className=\"resume-temp-check-icon\">\n                    {rt.id === resumeFormFields.template?.id ? (\n                      <RadioButtonChecked color=\"primary\"/>\n                    ) : (\n                      <RadioButtonUnchecked />\n                    )}\n                  </div>\n\n                  <div className={\"bold resume-temp-title \" + (rt.id === resumeFormFields.template?.id && \"selected\")}>{rt.name}</div>\n                </Grid>\n              );\n            })}\n          </Grid>\n\n          <Button\n            className=\"pr previewBtn\"\n            size=\"large\"\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              onPreviewBtnClick();\n            }}\n          >\n            PREVIEW\n          </Button>\n        </CardContent>\n      </Card>\n\n      <Dialog\n        fullScreen\n        open={showPreview}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n      >\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          onClick={handleClose}\n          aria-label=\"close\"\n          className=\"closeBtn\"\n        >\n          <CloseIcon />\n        </IconButton>\n        <ResumePreview selectedResumeTemp={resumeFormFields.template} addResumeForm={addResumeForm}/>\n      </Dialog>\n    </>\n  );\n};\n","import { FormService } from \"./FormService\";\nconst addResumeForm = FormService;\n\nconst fieldsMinCount = {\n  technicalSkills: 4,\n  professionalSkills: 2,\n  experiences: 1,\n  educations: 2,\n  projects: 1,\n  certificates: 1,\n  languages: 2,\n};\n\nconst fields = {\n  general: {\n    resumeName: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    name: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    title: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    about: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    image: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n      addResumeForm.validators.url\n    ]),\n    phone: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    email: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n      addResumeForm.validators.email,\n    ]),\n    linkedIn: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n      addResumeForm.validators.url,\n    ]),\n    location: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n  },\n  technicalSkills: (resumeEditData) => {\n    return {\n      skills: new Array(\n        resumeEditData?.technicalSkills?.ratings?.length || fieldsMinCount.technicalSkills\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      ),\n      ratings: new Array(\n        resumeEditData?.technicalSkills?.ratings?.length || fieldsMinCount.technicalSkills\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      ),\n    };\n  },\n  professionalSkills: (resumeEditData) => {\n    return {\n      skills: new Array(\n        resumeEditData?.professionalSkills?.ratings?.length ||\n        fieldsMinCount.professionalSkills\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      ),\n      ratings: new Array(\n        resumeEditData?.professionalSkills?.ratings?.length ||\n        fieldsMinCount.professionalSkills\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      ),\n    };\n  },\n  experiences: {\n    title: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    employmentType: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"fullTime\"\n    ),\n    company: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    location: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    startDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    endDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    roles: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    current: addResumeForm.getGeneralFieldObj([], false),\n  },\n  educations: {\n    school: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    degree: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    field: addResumeForm.getGeneralFieldObj(),\n    startDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    endDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    grade: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n  },\n  projects: {\n    name: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    company: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    url: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n      addResumeForm.validators.url,\n    ]),\n    startDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    endDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    desc: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    tech: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    roles: addResumeForm.getGeneralFieldObj([\n      addResumeForm.validators.required,\n    ]),\n    current: addResumeForm.getGeneralFieldObj([], false),\n  },\n  certificates: {\n    name: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    org: addResumeForm.getGeneralFieldObj([addResumeForm.validators.required]),\n    startDate: addResumeForm.getGeneralFieldObj(\n      [addResumeForm.validators.required],\n      \"dateString\"\n    ),\n    endDate: addResumeForm.getGeneralFieldObj([], \"dateString\"),\n    cid: addResumeForm.getGeneralFieldObj(),\n    url: addResumeForm.getGeneralFieldObj([addResumeForm.validators.url]),\n  },\n  languages: (resumeEditData) => {\n    return {\n      lang: new Array(\n        resumeEditData?.languages?.ratings?.length || fieldsMinCount.languages\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      ),\n      ratings: new Array(\n        resumeEditData?.languages?.ratings?.length || fieldsMinCount.languages\n      ).fill(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      ),\n    };\n  },\n};\nconst getFieldsMinCount = (name) => {\n  return fieldsMinCount[name];\n};\nconst getFields = (name, resumeEditData) => {\n  //console.log(\"getFields :: name ::\", name);\n  if (resumeEditData) {\n    return fields[name](resumeEditData);\n  } else {\n    return fields[name];\n  }\n};\nconst getFieldList = (name, data) => {\n  if ([\"technicalSkills\", \"professionalSkills\", \"languages\"].includes(name)) {\n    return getFields(name, data);\n  } else if([\"general\"].includes(name)){\n    return getFields(name);\n  }else {\n    return new Array(data || fieldsMinCount[name]).fill(getFields(name));\n  }\n};\n\nexport const FormFieldService = {\n  getFieldsMinCount,\n  getFields,\n  getFieldList,\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\n\nexport const EduTemp = ({ addResumeForm, resumeFormFields, onAdd, onDlt, resumeEditData }) => {\n  \n  return (\n    <div>\n      <h2 className=\"title2\">Educations</h2>\n\n      {resumeFormFields?.educations?.map((edu, i) => {\n        const projDiv = (\n          <Card key={\"edu_\" + i} className=\"card-container\">\n            <CardContent>\n              <div className=\"snodiv\">{\"#EDUCATION : \" + (i + 1)}</div>\n              <Grid className=\"\" container spacing={2}>\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"school_\" + (i + 1)}\n                    label={\"School \"}\n                    type=\"text\"\n                    value={edu.school.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"school\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"school\",\n                      ]);\n                    }}\n                    error={edu.school.errors.length == 0 ? false : true}\n                    helperText={edu.school.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"degree_\" + (i + 1)}\n                    label={\"Degree \"}\n                    type=\"text\"\n                    value={edu.degree.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"degree\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"degree\",\n                      ]);\n                    }}\n                    error={edu.degree.errors.length == 0 ? false : true}\n                    helperText={edu.degree.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"field_\" + (i + 1)}\n                    label={\"Field \"}\n                    placeholder=\"eg. Business\"\n                    type=\"text\"\n                    value={edu.field.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"field\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"field\",\n                      ]);\n                    }}\n                    error={edu.field.errors.length == 0 ? false : true}\n                    helperText={edu.field.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"startDate_\" + (i + 1)}\n                    label={\"Start Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={edu.startDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    error={edu.startDate.errors.length == 0 ? false : true}\n                    helperText={edu.startDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"endDate_\" + (i + 1)}\n                    label={\"End Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={edu.endDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    error={edu.endDate.errors.length == 0 ? false : true}\n                    helperText={edu.endDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"grade_\" + (i + 1)}\n                    label={\"Grade\"}\n                    type=\"text\"\n                    value={edu.grade.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"grade\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"educations\",\n                        i,\n                        \"grade\",\n                      ]);\n                    }}\n                    error={edu.grade.errors.length == 0 ? false : true}\n                    helperText={edu.grade.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={1} md={1} sx={1}>\n                  {i === resumeFormFields.educations.length - 1 && (\n                    <Tooltip title=\"Add New Education\" placement=\"bottom\">\n                      <IconButton\n                        onClick={() => {\n                          onAdd([\"educations\"], FormFieldService.getFields(\"educations\"));\n                        }}\n                      >\n                        <AddCircleOutlineOutlinedIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  {resumeFormFields?.educations?.length > FormFieldService.getFieldsMinCount(\"educations\") && (\n                    <Tooltip title=\"Delete Education\" placement=\"bottom\">\n                      <IconButton\n                        onClick={() => {\n                          onDlt([\"educations\"], i);\n                        }}\n                      >\n                        <Delete />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        );\n        return projDiv;\n      })}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n  Checkbox\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\n\nexport const ProjTemp = ({ addResumeForm, resumeFormFields, onAdd, onDlt, resumeEditData }) => {\n  \n  return (\n    <div>\n      <h2 className=\"title2\">Projects</h2>\n\n      {resumeFormFields?.projects?.map((p, i) => {\n        const projDiv = (\n          <Card key={\"proj_\" + i} className=\"card-container\">\n            <CardContent>\n              <div className=\"snodiv\">{\"#PROJECT : \" + (i + 1)}</div>\n              <div>\n                              <Checkbox className=\"checkBox-pad\"\n                                {... { inputProps: { 'aria-label': 'Checkbox demo' } }}\n                                sx={{ \"& .MuiSvgIcon-root\": { fontSize: 28 } }}\n                                checked={p.current.value}\n                                onChange={(e)=>{\n                                  addResumeForm.onFormFieldChange(e, [\n                                    \"projects\",\n                                    i,\n                                    \"current\",\n                                  ]);\n                                  setTimeout(() => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"projects\",\n                                      i,\n                                      \"endDate\",\n                                    ], e.target.checked);\n                                  });\n                                  \n                                }}\n                              />\n                              <span>Presently Working</span>\n                            </div>\n              <Grid className=\"\" container spacing={2}>\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"name_\" + (i + 1)}\n                    label={\"Name \"}\n                    type=\"text\"\n                    value={p.name.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"name\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"name\",\n                      ]);\n                    }}\n                    error={p.name.errors.length == 0 ? false : true}\n                    helperText={p.name.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"url_\" + (i + 1)}\n                    label={\"Project Url \"}\n                    type=\"text\"\n                    value={p.url.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"url\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"url\",\n                      ]);\n                    }}\n                    error={p.url.errors.length == 0 ? false : true}\n                    helperText={p.url.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"startDate_\" + (i + 1)}\n                    label={\"Start Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={p.startDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    error={p.startDate.errors.length == 0 ? false : true}\n                    helperText={p.startDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"endDate_\" + (i + 1)}\n                    label={\"End Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    disabled={p.endDate.disabled}\n                    value={p.endDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    error={p.endDate.errors.length == 0 ? false : true}\n                    helperText={p.endDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={6} md={6} sx={6}>\n                  <TextField\n                    id={\"proj_comp_\" + (i + 1)}\n                    label={\"Project's Commpany \"}\n                    type=\"text\"\n                    value={p.company.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"company\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"company\",\n                      ]);\n                    }}\n                    error={p.company.errors.length == 0 ? false : true}\n                    helperText={p.company.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={6} md={6} sx={6}>\n                  <TextField\n                    id={\"tech_\" + (i + 1)}\n                    label={\"Technologies Used\"}\n                    placeholder=\"HTML, CSS, Javascript\"\n                    type=\"text\"\n                    value={p.tech.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"tech\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"tech\",\n                      ]);\n                    }}\n                    error={p.tech.errors.length == 0 ? false : true}\n                    helperText={p.tech.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={12} md={12} sx={12}>\n                  <TextField\n                    id={\"desc_\" + (i + 1)}\n                    label={\"Description \"}\n                    multiline\n                    rows={3}\n                    type=\"text\"\n                    value={p.desc.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"desc\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"desc\",\n                      ]);\n                    }}\n                    error={p.desc.errors.length == 0 ? false : true}\n                    helperText={p.desc.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={11} md={11} sx={11}>\n                  <TextField\n                    id={\"roles_\" + (i + 1)}\n                    label={\"Roles & Responsibilities\"}\n                    type=\"text\"\n                    multiline\n                    rows={3}\n                    placeholder=\"a. Requirement Gathering &#13;&#10;b. Front-end Development &#13;&#10;c. API development\"\n                    value={p.roles.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"roles\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"projects\",\n                        i,\n                        \"roles\",\n                      ]);\n                    }}\n                    error={p.roles.errors.length == 0 ? false : true}\n                    helperText={p.roles.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={1} md={1} sx={1}>\n                  {i === resumeFormFields.projects.length - 1 && (\n                    <Tooltip title=\"Add New Project\" placement=\"bottom\">\n                      <IconButton\n                        onClick={() => {\n                          onAdd([\"projects\"], FormFieldService.getFields(\"projects\"));\n                        }}\n                      >\n                        <AddCircleOutlineOutlinedIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  {resumeFormFields?.projects?.length > FormFieldService.getFieldsMinCount(\"projects\") && (\n                    <Tooltip title=\"Delete Project\" placement=\"bottom\">\n                      <IconButton\n                        onClick={() => {\n                          onDlt([\"projects\"], i);\n                        }}\n                      >\n                        <Delete />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        );\n        return projDiv;\n      })}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\n\nexport const LangTemp = ({\n  addResumeForm,\n  resumeFormFields,\n  setResumeFormFields,\n  onAdd,\n  onDlt,\n  resumeEditData\n}) => {\n\n  return (\n    <div>\n      <h2 className=\"title2\">Languages</h2>\n      <Card>\n        <CardContent>\n          {resumeFormFields?.languages?.lang?.map((ts, i) => {\n            const tsr = resumeFormFields.languages.ratings[i];\n            const tsdiv = (\n              <Grid\n                key={\"row_\" + i}\n                className=\"contRowMargin\"\n                container\n                spacing={2}\n              >\n                <Grid item xs={5} md={5} sx={5}>\n                  <TextField\n                    id={\"name_\" + (i + 1)}\n                    label={\"Language Name \" + (i + 1)}\n                    type=\"text\"\n                    value={ts.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"languages\",\n                        \"lang\",\n                        i,\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"languages\",\n                        \"lang\",\n                        i,\n                      ]);\n                    }}\n                    error={ts.errors.length == 0 ? false : true}\n                    helperText={ts.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item xs={5} md={5} sx={5}>\n                  <div className=\"customInputBorder\">\n                    <div className=\"customInputBorderLabel\">\n                      Rating({tsr.value})\n                    </div>\n                    <Slider\n                      aria-label=\"Rating\"\n                      defaultValue={1}\n                      valueLabelDisplay=\"auto\"\n                      marks\n                      value={tsr.value}\n                      onChange={(e) => {\n                        addResumeForm.onFormFieldChange(e, [\n                          \"languages\",\n                          \"ratings\",\n                          i,\n                        ]);\n                      }}\n                      min={1}\n                      max={10}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={2} md={2} sx={2}>\n                  <div className=\"addDltBtn\">\n                    {i === resumeFormFields.languages.lang.length - 1 && (\n                      <Tooltip title=\"Add New Language\" placement=\"bottom\">\n                        <IconButton\n                          onClick={() => {\n                            onAdd([\"languages\"]);\n                          }}\n                        >\n                          <AddCircleOutlineOutlinedIcon />\n                        </IconButton>\n                      </Tooltip>\n                    )}\n                    {resumeFormFields?.languages?.lang.length > FormFieldService.getFieldsMinCount(\"languages\") && (\n                      <Tooltip title=\"Delete Language\" placement=\"bottom\">\n                        <IconButton\n                          onClick={() => {\n                            onDlt([\"languages\"], i);\n                          }}\n                        >\n                          <Delete />\n                        </IconButton>\n                      </Tooltip>\n                    )}\n                  </div>\n                </Grid>\n              </Grid>\n            );\n            return tsdiv;\n          })}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\n\nexport const CertTemp = ({ addResumeForm, resumeFormFields, onAdd, onDlt, resumeEditData }) => {\n\n  return (\n    <div>\n      <h2 className=\"title2\">\n        Certification or License\n\n        {!resumeFormFields?.certificates?.length && (\n                    <Tooltip\n                      title=\"Add New Certificate or Licence\"\n                      placement=\"bottom\"\n                    >\n                      <IconButton\n                        onClick={() => {\n                          onAdd([\"certificates\"], FormFieldService.getFields(\"certificates\"));\n                        }}\n                      >\n                        <AddCircleOutlineOutlinedIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n        \n        </h2>\n\n      {resumeFormFields?.certificates?.map((cert, i) => {\n        const projDiv = (\n          <Card key={\"cert_\" + i} className=\"card-container\">\n            <CardContent>\n              <div className=\"snodiv\">{\"#CERTIFICATE or LICENCE : \" + (i + 1)}</div>\n              <Grid className=\"\" container spacing={2}>\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"name_\" + (i + 1)}\n                    label={\"Name \"}\n                    type=\"text\"\n                    value={cert.name.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"name\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"name\",\n                      ]);\n                    }}\n                    error={cert.name.errors.length == 0 ? false : true}\n                    helperText={cert.name.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"startDate_\" + (i + 1)}\n                    label={\"Start Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={cert.startDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"startDate\",\n                      ]);\n                    }}\n                    error={cert.startDate.errors.length == 0 ? false : true}\n                    helperText={cert.startDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"endDate_\" + (i + 1)}\n                    label={\"End Date \"}\n                    type=\"date\"\n                    sx={{ width: \"100%\" }}\n                    value={cert.endDate.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"endDate\",\n                      ]);\n                    }}\n                    error={cert.endDate.errors.length == 0 ? false : true}\n                    helperText={cert.endDate.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={3} md={3} sx={3}>\n                  <TextField\n                    id={\"org_\" + (i + 1)}\n                    label={\"Issuing Organisation \"}\n                    type=\"text\"\n                    value={cert.org.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"org\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"org\",\n                      ]);\n                    }}\n                    error={cert.org.errors.length == 0 ? false : true}\n                    helperText={cert.org.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"cid_\" + (i + 1)}\n                    label={\"Credential Id\"}\n                    type=\"text\"\n                    value={cert.cid.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"cid\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"cid\",\n                      ]);\n                    }}\n                    error={cert.cid.errors.length == 0 ? false : true}\n                    helperText={cert.cid.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={4} md={4} sx={4}>\n                  <TextField\n                    id={\"url_\" + (i + 1)}\n                    label={\"Credential Url\"}\n                    type=\"text\"\n                    value={cert.url.value}\n                    onChange={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"url\",\n                      ]);\n                    }}\n                    onBlur={(e) => {\n                      addResumeForm.onFormFieldChange(e, [\n                        \"certificates\",\n                        i,\n                        \"url\",\n                      ]);\n                    }}\n                    error={cert.url.errors.length == 0 ? false : true}\n                    helperText={cert.url.errors.join(\"\\n\")}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={1} md={1} sx={1}>\n                  {i === resumeFormFields.certificates.length - 1 && (\n                    <Tooltip\n                      title=\"Add New Certificate or Licence\"\n                      placement=\"bottom\"\n                    >\n                      <IconButton\n                        onClick={() => {\n                          onAdd([\"certificates\"], FormFieldService.getFields(\"certificates\"));\n                        }}\n                      >\n                        <AddCircleOutlineOutlinedIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  {/* {resumeFormFields?.certificates?.length > FormFieldService.getFieldsMinCount(\"certificates\") && ( */}\n                    <Tooltip\n                      title=\"Delete Certificate or Licence\"\n                      placement=\"bottom\"\n                    >\n                      <IconButton\n                        onClick={() => {\n                          onDlt([\"certificates\"], i);\n                        }}\n                      >\n                        <Delete />\n                      </IconButton>\n                    </Tooltip>\n                  {/* )} */}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        );\n        return projDiv;\n      })}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./addResume.css\";\nimport {\n  Alert,\n  Dialog,\n  Slide,\n  Button,\n  TextField,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Checkbox,\n  Slider,\n  InputLabel,\n  MenuItem,\n  FormControl,\n  Select,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport { Add, Delete, CheckCircle } from \"@mui/icons-material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DatePicker from \"@mui/lab/DatePicker\";\nimport DesktopDatePicker from \"@mui/lab/DesktopDatePicker\";\nimport MobileDatePicker from \"@mui/lab/MobileDatePicker\";\nimport { ResumeService } from \"../../services/ResumeService\";\nimport { ResumeTemplate } from \"./resumeTemplate/ResumeTemplate\";\nimport { FormService } from \"../../services/FormService\";\nimport { EduTemp } from \"./EduTemp\";\nimport { ProjTemp } from \"./ProjTemp\";\nimport { LangTemp } from \"./LangTemp\";\nimport { CertTemp } from \"./CertTemp\";\nimport { FormFieldService } from \"../../services/FormFieldsService\";\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"down\" ref={ref} {...props} />;\n});\n\nexport const AddResume = (props) => {\n  const addResumeCont = {\n    main: {\n      background: \"#fff\",\n      boxSizing: \"border-box\",\n      padding: \"1em\",\n    },\n    sectionsCont: {\n      background: \"#eee\",\n      marginTop: \"9px\",\n      paddingLeft: \"0\",\n      boxShadow: \"0 0 15px rgba(0,0,0,0.75)\",\n      clipPath: \"inset(0px -15px 0px 0px)\",\n    },\n    sectionsRCont: {\n      padding: \"0\",\n    },\n    sectionsContLiUl: {\n      listStyleType: \"none\",\n      paddingLeft: \"0\",\n    },\n    sectionsContLi: {\n      borderBottom: \"1px solid #ccc\",\n      padding: \"20px 30px\",\n      fontSize: \"1.2em\",\n      textTransform: \"uppercase\",\n      cursor: \"pointer\",\n    },\n    form: {\n      background: \"#eee\",\n      marginTop: \"20px\",\n      height: \"calc(100vh - 200px)\",\n      overflowY: \"scroll\",\n      marginTop: \"8px\",\n      boxSizing: \"border-box\",\n      padding: \"1em\",\n    },\n    addDltBtn: {\n      paddingTop: \"16px\",\n    },\n    skillRowMargin: {\n      marginBottom: \"20px\",\n    },\n    expRowMargin: {\n      paddingBottom: \"2.5em\",\n      paddingTop: \"2.5em\",\n      marginBottom: \"1.3em\",\n      boxShadow: \"0 0 10px rgba(0,0,0,0.75)\",\n      clipPath: \"inset(0px 0px -10px 0px)\",\n    },\n    submitBtn: {\n      marginTop: \"1.6%\",\n      marginRight: \"1%\",\n      float: \"right\",\n    },\n  };\n\n  const tabList = {\n    general: \"General\",\n    educations: \"Education\",\n    experiences: \"Experiences\",\n    projects: \"Projects\",\n    technicalSkills: \"Technical Skills\",\n    professionalSkills: \"Professional Skills\",\n    languages: \"Languages\",\n    certificates: \"Certifications & Rewards\",\n    templates: \"Templates\",\n  };\n  const tabs = Object.keys(tabList);\n  const [activeSection, setActiveSection] = useState(props.activeSection || \"general\");\n\n  /* form operations - start */\n  const addResumeForm = FormService;\n\n  const resumeFormFieldsObj = {\n    general: FormFieldService.getFieldList(\"general\"),\n    technicalSkills: FormFieldService.getFieldList(\"technicalSkills\", props?.resumeEditData),\n    professionalSkills: FormFieldService.getFieldList(\"professionalSkills\", props?.resumeEditData),\n    experiences: FormFieldService.getFieldList(\"experiences\", props?.resumeEditData?.experiences?.length),\n    educations: FormFieldService.getFieldList(\"educations\", props?.resumeEditData?.educations?.length),\n    projects: FormFieldService.getFieldList(\"projects\", props?.resumeEditData?.projects?.length),\n    certificates: FormFieldService.getFieldList(\"certificates\", props?.resumeEditData?.certificates?.length),\n    languages: FormFieldService.getFieldList(\"languages\", props?.resumeEditData),\n    template: {},\n  };\n\n  const [resumeFormFields, setResumeFormFields] = useState(resumeFormFieldsObj);\n  addResumeForm.init(resumeFormFields, setResumeFormFields);\n\n  /* form operations - end */\n\n  useEffect(() => {\n    console.log(\n      \"resumeFormFields :: useEffect :: resumeEditData ::\",\n      props.resumeEditData\n    );\n    console.log(\n      \"resumeFormFields :: useEffect :: resumeFormFields ::\",\n      resumeFormFields\n    );\n\n    if (props.resumeEditData) {\n      addResumeForm.setValue(props.resumeEditData);\n    }\n  }, []);\n\n\n  const onAdd = (formNames, fieldsmapObj) => {\n    let copyResumeFormFields = JSON.parse(JSON.stringify(resumeFormFields));\n    let tsList = copyResumeFormFields;\n    for (let fn of formNames) {\n      tsList = tsList[fn];\n    }\n\n    if (\n      formNames.includes(\"technicalSkills\") ||\n      formNames.includes(\"professionalSkills\")\n    ) {\n      tsList.skills.push(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      );\n      tsList.ratings.push(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      );\n    } else if (formNames.includes(\"languages\")) {\n      tsList.lang.push(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required])\n      );\n      tsList.ratings.push(\n        addResumeForm.getGeneralFieldObj([addResumeForm.validators.required], 1)\n      );\n    } else {\n      tsList.push(fieldsmapObj);\n    }\n\n    setResumeFormFields(copyResumeFormFields);\n  };\n\n  const onDlt = (formNames, index) => {\n    let copyResumeFormFields = JSON.parse(JSON.stringify(resumeFormFields));\n    let tsList = copyResumeFormFields;\n    for (let fn of formNames) {\n      tsList = tsList[fn];\n    }\n\n    if (\n      formNames.includes(\"technicalSkills\") ||\n      formNames.includes(\"professionalSkills\")\n    ) {\n      tsList.skills.splice(index, 1);\n      tsList.ratings.splice(index, 1);\n    } else if (formNames.includes(\"languages\")) {\n      tsList.lang.splice(index, 1);\n      tsList.ratings.splice(index, 1);\n    } else {\n      tsList.splice(index, 1);\n    }\n\n    setResumeFormFields(copyResumeFormFields);\n  };\n\n  const onFormSubmit = (id) => {\n    console.log(\n      \"onFormSubmit :: resumeFormFields :: id :: \",\n      resumeFormFields,\n      id\n    );\n    const payload = addResumeForm.getValue();\n\n    if (id) {\n      ResumeService.editResume(id, payload);\n      props.closeForm();\n    } else {\n      if (activeSection === tabs[tabs.length - 1]) {\n        // save\n        const errorTab = [];\n        const tabErrors = JSON.parse(JSON.stringify(tabList));\n        for (let tab in tabErrors) {\n          const error = !addResumeForm.isFormValid(tab);\n          if (error) {\n            errorTab.push(tab);\n            tabErrors[tab] = error;\n            break;\n          }\n        }\n\n        console.log(\"onFormSubmit :: errorTab ::\", errorTab);\n\n        if (errorTab.length) {\n          setActiveSection(errorTab[0]);\n        } else {\n          console.log(\"onFormSubmit :: payload ::\", payload);\n          ResumeService.saveResume(payload);\n          props.closeForm();\n        }\n      } else {\n        if (addResumeForm.isFormValid(activeSection)) {\n          setActiveSection(tabs[tabs.indexOf(activeSection) + 1]);\n        }\n      }\n    }\n  };\n\n  return (\n    <Dialog\n      fullScreen\n      open={true}\n      onClose={props.closeForm}\n      TransitionComponent={Transition}\n    >\n      <IconButton\n        edge=\"start\"\n        color=\"inherit\"\n        onClick={props.closeForm}\n        aria-label=\"close\"\n        className=\"closeBtn\"\n      >\n        <CloseIcon />\n      </IconButton>\n      <div style={addResumeCont.main}>\n        <h1 className=\"title1\">\n          {props.resumeEditData ? \"Edit\" : \"Add\"} Resume{\" \"}\n        </h1>\n        {/* <h3 className=\"title2\"> {props.resumeEditData ?  props.resumeEditData?.general?.resumeName : ''}</h3> */}\n        <hr></hr>\n\n        <Grid container spacing={2}>\n          <Grid style={addResumeCont.sectionsCont} item xs={2} md={2} sx={2}>\n            <ul style={addResumeCont.sectionsContLiUl}>\n              {Object.keys(tabList).map((tab, i) => {\n                const tabHtml = (\n                  <li\n                    key={tab + i}\n                    style={addResumeCont.sectionsContLi}\n                    className={\n                      \"section \" + (activeSection === tab && \"activeSection\")\n                    }\n                    onClick={() => {\n                      setActiveSection(tab);\n                    }}\n                  >\n                    {tabList[tab]}\n                  </li>\n                );\n                return tabHtml;\n              })}\n            </ul>\n          </Grid>\n\n          <Grid\n            style={addResumeCont.sectionsRCont}\n            item\n            xs={10}\n            md={10}\n            sx={10}\n          >\n            <form style={addResumeCont.form}>\n              {(activeSection === \"intro\" || activeSection === \"general\") && (\n                <>\n                  <h2 className=\"title2\">Resume Name</h2>\n                  <Card>\n                    <CardContent>\n                      <Grid container spacing={2}>\n                        <Grid item xs={6} md={6} sx={6}>\n                          <TextField\n                            id=\"resumeName\"\n                            label=\"Resume Name\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.resumeName.value}\n                            placeholder=\"eg. Resume-India\"\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"resumeName\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"resumeName\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.resumeName.errors\n                                .length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.resumeName.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                  </Card>\n\n                  <h2 className=\"title2\">Introduction</h2>\n                  <Card>\n                    <CardContent>\n                      <Grid container spacing={2}>\n                        <Grid item xs={6} md={6} sx={6}>\n                          {/* <input className=\"formGroup\" type=\"text\" id=\"name\" placeholder=\"Name\" />     */}\n                          <TextField\n                            id=\"name\"\n                            label=\"Name\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.name.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"name\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"name\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.name.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.name.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={6} md={6} sx={6}>\n                          <TextField\n                            id=\"title\"\n                            label=\"Title\"\n                            placeholder=\"eg. Full Stack Developer @AB\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.title.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"title\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"title\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.title.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.title.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={12} md={12}>\n                          <TextField\n                            id=\"about\"\n                            label=\"About Yourself...\"\n                            multiline\n                            rows={2}\n                            value={resumeFormFields.general.about.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"about\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"about\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.about.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.about.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={12} md={12} sx={12}>\n                          <TextField\n                            id=\"image\"\n                            label=\"Image Url\"\n                            placeholder=\"Provide Image url\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.image.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"image\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"image\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.image.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.image.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                  </Card>\n                </>\n              )}\n\n              {(activeSection === \"cd\" || activeSection === \"general\") && (\n                <>\n                  <h2 className=\"title2\">Contact Details</h2>\n                  <Card>\n                    <CardContent>\n                      <Grid container spacing={2}>\n                        <Grid item xs={6} md={6} sx={6}>\n                          <TextField\n                            id=\"phone\"\n                            label=\"Phone\"\n                            placeholder=\"1234567890, 0987654321\"\n                            type=\"text\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.phone.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"phone\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"phone\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.phone.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.phone.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={6} md={6}>\n                          <TextField\n                            id=\"email\"\n                            label=\"Email\"\n                            type=\"email\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.email.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"email\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"email\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.email.errors.length == 0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.email.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={6} md={6}>\n                          <TextField\n                            id=\"linkedIn\"\n                            label=\"LinkedIn Url\"\n                            type=\"text\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.linkedIn.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"linkedIn\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"linkedIn\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.linkedIn.errors.length ==\n                              0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.linkedIn.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                        <Grid item xs={6} md={6}>\n                          <TextField\n                            id=\"location\"\n                            label=\"Present location eg. Bangalore\"\n                            type=\"text\"\n                            variant=\"outlined\"\n                            value={resumeFormFields.general.location.value}\n                            onChange={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"location\",\n                              ]);\n                            }}\n                            onBlur={(e) => {\n                              addResumeForm.onFormFieldChange(e, [\n                                \"general\",\n                                \"location\",\n                              ]);\n                            }}\n                            error={\n                              resumeFormFields.general.location.errors.length ==\n                              0\n                                ? false\n                                : true\n                            }\n                            helperText={resumeFormFields.general.location.errors.join(\n                              \"\\n\"\n                            )}\n                            fullWidth\n                          />\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                  </Card>\n                </>\n              )}\n\n              {activeSection === \"technicalSkills\" && (\n                <>\n                  {/* Technical skills - start */}\n                  <h2 className=\"title2\">Technical Skills</h2>\n                  <Card>\n                    <CardContent>\n                      {resumeFormFields.technicalSkills.skills.map((ts, i) => {\n                        const tsr = resumeFormFields.technicalSkills.ratings[i];\n                        const tsdiv = (\n                          <Grid\n                            key={\"row_\" + i}\n                            style={addResumeCont.skillRowMargin}\n                            container\n                            spacing={2}\n                          >\n                            <Grid item xs={5} md={5} sx={5}>\n                              <TextField\n                                id={\"name_\" + (i + 1)}\n                                label={\"Skill Name \" + (i + 1)}\n                                type=\"text\"\n                                value={ts.value}\n                                onChange={(e) => {\n                                  addResumeForm.onFormFieldChange(e, [\n                                    \"technicalSkills\",\n                                    \"skills\",\n                                    i,\n                                  ]);\n                                }}\n                                onBlur={(e) => {\n                                  addResumeForm.onFormFieldChange(e, [\n                                    \"technicalSkills\",\n                                    \"skills\",\n                                    i,\n                                  ]);\n                                }}\n                                error={ts.errors.length == 0 ? false : true}\n                                helperText={ts.errors.join(\"\\n\")}\n                                variant=\"outlined\"\n                                fullWidth\n                              />\n                            </Grid>\n                            <Grid item xs={5} md={5} sx={5}>\n                              <div className=\"customInputBorder\">\n                                <div className=\"customInputBorderLabel\">\n                                  Rating({tsr.value})\n                                </div>\n                                <Slider\n                                  aria-label=\"Rating\"\n                                  defaultValue={1}\n                                  valueLabelDisplay=\"auto\"\n                                  marks\n                                  value={tsr.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"technicalSkills\",\n                                      \"ratings\",\n                                      i,\n                                    ]);\n                                  }}\n                                  min={1}\n                                  max={10}\n                                />\n                              </div>\n                            </Grid>\n                            <Grid item xs={2} md={2} sx={2}>\n                              <div style={addResumeCont.addDltBtn}>\n                                {i ===\n                                  resumeFormFields.technicalSkills.skills\n                                    .length -\n                                    1 && (\n                                  <Tooltip\n                                    title=\"Add New Skill\"\n                                    placement=\"bottom\"\n                                  >\n                                    <IconButton\n                                      onClick={() => {\n                                        onAdd([\"technicalSkills\"]);\n                                      }}\n                                    >\n                                      <AddCircleOutlineOutlinedIcon />\n                                    </IconButton>\n                                  </Tooltip>\n                                )}\n                                {resumeFormFields.technicalSkills.skills\n                                  .length > FormFieldService.getFieldsMinCount(\"technicalSkills\") && (\n                                  <Tooltip\n                                    title=\"Delete Skill\"\n                                    placement=\"bottom\"\n                                  >\n                                    <IconButton\n                                      onClick={() => {\n                                        onDlt([\"technicalSkills\"], i);\n                                      }}\n                                    >\n                                      <Delete />\n                                    </IconButton>\n                                  </Tooltip>\n                                )}\n                              </div>\n                            </Grid>\n                          </Grid>\n                        );\n                        return tsdiv;\n                      })}\n                    </CardContent>\n                  </Card>\n                  {/* Technical skills - end */}\n                </>\n              )}\n\n              {activeSection === \"professionalSkills\" && (\n                <>\n                  {/* Professional skills - start */}\n                  <h2 className=\"title2\">Professional Skills</h2>\n                  <Card>\n                    <CardContent>\n                      {resumeFormFields.professionalSkills.skills.map(\n                        (ps, i) => {\n                          const psr =\n                            resumeFormFields.professionalSkills.ratings[i];\n                          const psdiv = (\n                            <Grid\n                              key={\"row_\" + i}\n                              style={addResumeCont.skillRowMargin}\n                              container\n                              spacing={2}\n                            >\n                              <Grid item xs={5} md={5} sx={5}>\n                                <TextField\n                                  id={\"name_\" + (i + 1)}\n                                  label={\"Skill Name \" + (i + 1)}\n                                  type=\"text\"\n                                  value={ps.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"professionalSkills\",\n                                      \"skills\",\n                                      i,\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"professionalSkills\",\n                                      \"skills\",\n                                      i,\n                                    ]);\n                                  }}\n                                  error={ps.errors.length == 0 ? false : true}\n                                  helperText={ps.errors.join(\"\\n\")}\n                                  variant=\"outlined\"\n                                  fullWidth\n                                />\n                              </Grid>\n                              <Grid item xs={5} md={5} sx={5}>\n                                <div className=\"customInputBorder\">\n                                  <div className=\"customInputBorderLabel\">\n                                    Rating({psr.value})\n                                  </div>\n                                  <Slider\n                                    aria-label=\"Rating\"\n                                    defaultValue={1}\n                                    valueLabelDisplay=\"auto\"\n                                    marks\n                                    value={psr.value}\n                                    onChange={(e) => {\n                                      addResumeForm.onFormFieldChange(e, [\n                                        \"professionalSkills\",\n                                        \"ratings\",\n                                        i,\n                                      ]);\n                                    }}\n                                    min={1}\n                                    max={10}\n                                  />\n                                </div>\n                              </Grid>\n                              <Grid item xs={2} md={2} sx={2}>\n                                <div style={addResumeCont.addDltBtn}>\n                                  {i ===\n                                    resumeFormFields.professionalSkills.skills\n                                      .length -\n                                      1 && (\n                                    <Tooltip\n                                      title=\"Add New Skill\"\n                                      placement=\"bottom\"\n                                    >\n                                      <IconButton\n                                        onClick={() => {\n                                          onAdd([\"professionalSkills\"]);\n                                        }}\n                                      >\n                                        <AddCircleOutlineOutlinedIcon />\n                                      </IconButton>\n                                    </Tooltip>\n                                  )}\n                                  {resumeFormFields.professionalSkills.skills\n                                    .length > FormFieldService.getFieldsMinCount(\"professionalSkills\") && (\n                                    <Tooltip\n                                      title=\"Delete Skill\"\n                                      placement=\"bottom\"\n                                    >\n                                      <IconButton\n                                        onClick={() => {\n                                          onDlt([\"professionalSkills\"], i);\n                                        }}\n                                      >\n                                        <Delete />\n                                      </IconButton>\n                                    </Tooltip>\n                                  )}\n                                </div>\n                              </Grid>\n                            </Grid>\n                          );\n                          return psdiv;\n                        }\n                      )}\n                    </CardContent>\n                  </Card>\n                  {/* Professional skills - end */}\n                </>\n              )}\n\n              {activeSection === \"experiences\" && (\n                <>\n                  <h2 className=\"title2\">Experience </h2>\n\n                  {resumeFormFields.experiences.map((experience, i) => {\n                    const expDiv = (\n                      <Card key={\"exp_\" + i} className=\"card-container\">\n                        <CardContent>\n                          <div>\n                            <div className=\"snodiv\">\n                              {\"#EXPERIENCE : \" + (i + 1)}\n                            </div>\n                            <div>\n                              <Checkbox\n                                className=\"checkBox-pad\"\n                                {...{\n                                  inputProps: { \"aria-label\": \"Checkbox demo\" },\n                                }}\n                                sx={{ \"& .MuiSvgIcon-root\": { fontSize: 28 } }}\n                                checked={experience.current.value}\n                                onChange={(e) => {\n                                  addResumeForm.onFormFieldChange(e, [\n                                    \"experiences\",\n                                    i,\n                                    \"current\",\n                                  ]);\n                                  setTimeout(() => {\n                                    addResumeForm.onFormFieldChange(\n                                      e,\n                                      [\"experiences\", i, \"endDate\"],\n                                      e.target.checked\n                                    );\n                                  });\n                                }}\n                              />\n                              <span>Presently Working</span>\n                            </div>\n                            <Grid container spacing={2}>\n                              <Grid item xs={4} md={4} sx={4}>\n                                <TextField\n                                  id={\"title\" + (i + 1)}\n                                  label=\"Title\"\n                                  type=\"text\"\n                                  variant=\"outlined\"\n                                  fullWidth\n                                  value={experience.title.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"title\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"title\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.title.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.title.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n                              </Grid>\n\n                              <Grid item xs={4} md={4} sx={4}>\n                                <FormControl fullWidth>\n                                  <InputLabel id=\"demo-simple-select-label\">\n                                    Employment Type\n                                  </InputLabel>\n                                  <Select\n                                    labelId={\"employmentType_\" + (i + 1)}\n                                    id={\"employmentType_\" + (i + 1)}\n                                    value={experience.employmentType.value}\n                                    label=\"Employment Type\"\n                                    onChange={(e) => {\n                                      addResumeForm.onFormFieldChange(e, [\n                                        \"experiences\",\n                                        i,\n                                        \"employmentType\",\n                                      ]);\n                                    }}\n                                  >\n                                    <MenuItem value=\"fullTime\">\n                                      Full-time\n                                    </MenuItem>\n                                    <MenuItem value=\"partTime\">\n                                      Part-time\n                                    </MenuItem>\n                                    <MenuItem value=\"selfEmployed\">\n                                      Self-employed\n                                    </MenuItem>\n                                  </Select>\n                                </FormControl>\n                              </Grid>\n\n                              <Grid item xs={4} md={4} sx={4}>\n                                <TextField\n                                  id={\"company\" + (i + 1)}\n                                  label=\"Company\"\n                                  type=\"text\"\n                                  variant=\"outlined\"\n                                  fullWidth\n                                  value={experience.company.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"company\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"company\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.company.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.company.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n                              </Grid>\n\n                              <Grid item xs={4} md={4} sx={4}>\n                                <TextField\n                                  id={\"location\" + (i + 1)}\n                                  label=\"Location\"\n                                  type=\"text\"\n                                  variant=\"outlined\"\n                                  fullWidth\n                                  value={experience.location.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"location\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"location\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.location.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.location.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n                              </Grid>\n\n                              <Grid item xs={4} md={4}>\n                                <TextField\n                                  id={\"startDate\" + (i + 1)}\n                                  label=\"Start Date\"\n                                  type=\"date\"\n                                  sx={{ width: \"100%\" }}\n                                  InputLabelProps={{\n                                    shrink: true,\n                                  }}\n                                  value={experience.startDate.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"startDate\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"startDate\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.startDate.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.startDate.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n                              </Grid>\n\n                              <Grid item xs={4} md={4}>\n                                <TextField\n                                  id={\"ed\" + (i + 1)}\n                                  label=\"End Date\"\n                                  type=\"date\"\n                                  sx={{ width: \"100%\" }}\n                                  InputLabelProps={{\n                                    shrink: true,\n                                  }}\n                                  disabled={experience.endDate.disabled}\n                                  value={experience.endDate.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"endDate\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"endDate\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.endDate.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.endDate.errors.join(\n                                    \"\\n\"\n                                  )}\n                                />\n\n                                {/* <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                    <DatePicker\n                                      label=\"Start Date\"\n                                      type=\"date\"\n                                      renderInput={(params) => <TextField {...params} />}\n                                    />\n                                  </LocalizationProvider>\n                                */}\n                              </Grid>\n\n                              <Grid item xs={11} md={11} sx={11}>\n                                <TextField\n                                  id={\"roles_\" + (i + 1)}\n                                  label={\"Roles & Responsibilities\"}\n                                  type=\"text\"\n                                  multiline\n                                  rows={3}\n                                  placeholder=\"a. Requirement Gathering &#13;&#10;b. Front-end Development &#13;&#10;c. API development\"\n                                  value={experience.roles.value}\n                                  onChange={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"roles\",\n                                    ]);\n                                  }}\n                                  onBlur={(e) => {\n                                    addResumeForm.onFormFieldChange(e, [\n                                      \"experiences\",\n                                      i,\n                                      \"roles\",\n                                    ]);\n                                  }}\n                                  error={\n                                    experience.roles.errors.length == 0\n                                      ? false\n                                      : true\n                                  }\n                                  helperText={experience.roles.errors.join(\n                                    \"\\n\"\n                                  )}\n                                  variant=\"outlined\"\n                                  fullWidth\n                                />\n                              </Grid>\n\n                              <Grid item xs={1} md={1} sx={1}>\n                                {i ===\n                                  resumeFormFields.experiences.length - 1 && (\n                                  <Tooltip\n                                    title=\"Add New Skill\"\n                                    placement=\"bottom\"\n                                  >\n                                    <IconButton\n                                      onClick={() => {\n                                        onAdd(\n                                          [\"experiences\"],\n                                          FormFieldService.getFields(\"experiences\")\n                                        );\n                                      }}\n                                    >\n                                      <AddCircleOutlineOutlinedIcon />\n                                    </IconButton>\n                                  </Tooltip>\n                                )}\n                                {resumeFormFields.experiences.length >\n                                  FormFieldService.getFieldsMinCount(\"experiences\") && (\n                                  <Tooltip\n                                    title=\"Delete Skill\"\n                                    placement=\"bottom\"\n                                  >\n                                    <IconButton\n                                      onClick={() => {\n                                        onDlt([\"experiences\"], i);\n                                      }}\n                                    >\n                                      <Delete />\n                                    </IconButton>\n                                  </Tooltip>\n                                )}\n                              </Grid>\n                            </Grid>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                    return expDiv;\n                  })}\n                </>\n              )}\n\n              {activeSection === \"templates\" && (\n                <ResumeTemplate\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n              {activeSection === \"educations\" && (\n                <EduTemp\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n              {activeSection === \"projects\" && (\n                <ProjTemp\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n              {activeSection === \"languages\" && (\n                <LangTemp\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n              {activeSection === \"certificates\" && (\n                <CertTemp\n                  addResumeForm={addResumeForm}\n                  resumeFormFields={resumeFormFields}\n                  setResumeFormFields={setResumeFormFields}\n                  onAdd={onAdd}\n                  onDlt={onDlt}\n                  resumeEditData={props.resumeEditData}\n                />\n              )}\n            </form>\n          </Grid>\n        </Grid>\n        {activeSection !== tabs[tabs.length - 1] && ( \n        <Button\n          className=\"pr\"\n          style={addResumeCont.submitBtn}\n          size=\"large\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            onFormSubmit();\n          }}\n        >\n          NEXT\n        </Button>\n        )}\n        {(props?.resumeEditData?.id || activeSection == tabs[tabs.length - 1]) && (\n          <Button\n            className=\"pr\"\n            style={addResumeCont.submitBtn}\n            size=\"large\"\n            variant=\"contained\"\n            color=\"success\"\n            onClick={() => {\n              onFormSubmit(props?.resumeEditData?.id);\n            }}\n          >\n            SAVE\n          </Button>\n         )}\n      </div>\n    </Dialog>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Add,\n  Edit,\n  Delete,\n  Download,\n  Preview,\n  Upload,\n} from \"@mui/icons-material\";\nimport { IconButton, Tooltip } from \"@mui/material\";\nimport { AddResume } from \"../components/addResume/AddResume\";\nimport Button from \"@mui/material/Button\";\nimport { ResumeService } from \"../services/ResumeService\";\n\nexport const ListResume = (props) => {\n  const styles = {\n    addResume: {\n      boxSizing: \"border-box\",\n    },\n    listResume: {\n      marginTop: \"1em\",\n      boxSizing: \"border-box\",\n    },\n    listRowFirst: {\n      fontWeight: \"bold\",\n    },\n    listRow: {\n      borderBottom: \"1px solid #ccc\",\n      marginBottom: \"12px\",\n    },\n    listCol: {\n      width: \"calc(100% /3)\",\n      boxSizing: \"border-box\",\n      padding: \"5px\",\n    },\n  };\n\n  const [activeSection, setActiveSection] = useState(\"general\");\n  const [showAddResume, setShowAddResume] = useState(false);\n  const [resumeEditData, setResumeEditData] = useState();\n\n  const addResumme = () => {\n    console.log(\"addResumme btn clicked !!!\");\n    setActiveSection(\"general\");\n    setResumeEditData();\n    setShowAddResume(true);\n  };\n\n  const closeForm = () => {\n    setShowAddResume(false);\n    props.fetchResumes();\n  };\n\n  const deleteResume = (idx) => {\n    let confirmResult = window.confirm(`Are you sure to delete resule - ${props?.resumes?.[idx]?.general.resumeName}`);\n    if(confirmResult){\n      console.log(\n        \"deleteResume btn clicked :: idx :: \",\n        idx,\n        props?.resumes?.[idx]\n      );\n      ResumeService.dltResume(props?.resumes?.[idx]?.id);\n      props.fetchResumes();\n    }\n  };\n\n  const editResume = (idx) => {\n    console.log(\n      \"editResume btn clicked :: idx :: \",\n      idx,\n      props?.resumes?.[idx]\n    );\n    setActiveSection(\"general\");\n    setResumeEditData(props?.resumes?.[idx]);\n    setShowAddResume(true);\n  };\n\n  const downloadResume = (idx) => {\n    setResumeEditData(props?.resumes?.[idx]);\n\n    const blob = new Blob([JSON.stringify(resumeEditData)], {\n      type: \"text/json\",\n    });\n    const link = document.createElement(\"a\");\n\n    link.download = resumeEditData?.general?.resumeName + \".json\";\n    link.href = window.URL.createObjectURL(blob);\n    link.dataset.downloadurl = [\"text/json\", link.download, link.href].join(\n      \":\"\n    );\n\n    const evt = new MouseEvent(\"click\", {\n      view: window,\n      bubbles: true,\n      cancelable: true,\n    });\n\n    link.dispatchEvent(evt);\n    link.remove();\n  };\n\n  const uploadResumme = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    \n    reader.readAsText(e.target.files[0]);\n\n    reader.onload = (e) => {\n      const text = e.target.result;\n      console.log(text);\n      ResumeService.uploadResume(JSON.parse(text));\n      props.fetchResumes();\n    };\n\n    reader.onerror = function () {\n      console.log(e.target.error);\n    };\n  };\n\n  const changeTemplate = (idx) => {\n    setResumeEditData(props?.resumes?.[idx]);\n    setActiveSection(\"templates\");\n    setShowAddResume(true);\n  };\n\n  const fileUpload = () => {\n    document.getElementById(\"File1\").click();\n  }\n  return (\n    <>\n      <div style={styles.addResume}>\n        {showAddResume && (\n          <AddResume\n            activeSection={activeSection}\n            resumeEditData={resumeEditData}\n            closeForm={closeForm}\n          />\n        )}\n        {/* <button className=\"addBtn pr\" onClick={()=>{addResumme()}}>ADD</button> */}\n\n        <Button\n          className=\"pr\"\n          variant=\"contained\"\n          color=\"success\"\n          onClick={() => {\n            addResumme();\n          }}\n        >\n          <Add /> &nbsp; ADD\n        </Button>\n\n        <Button\n          className=\"pr mr5\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            fileUpload();\n          }}\n        >\n          <Upload /> &nbsp; Upload\n        </Button>\n\n        <input\n          class=\"pr mr5\"\n          id=\"File1\"\n          type=\"file\"\n          onChange={(e) => {\n            uploadResumme(e);\n          }}\n        />\n      </div>\n      <div className=\"clear\"></div>\n      <div style={styles.listResume}>\n        <div className=\"page-cont\">\n          <hr />\n          <div style={styles.listRowFirst}>\n            <div className=\"fl\" style={styles.listCol}>\n              Resume Name\n            </div>\n            <div className=\"fl\" style={styles.listCol}>\n              Role\n            </div>\n            <div className=\"fl\" style={styles.listCol}>\n              Actions\n            </div>\n            <div className=\"clear\"></div>\n          </div>\n          <hr />\n          {props?.resumes?.map((r, i) => {\n            return (\n              <div key={\"resume\" + i} style={styles.listRow}>\n                <div className=\"fl\" style={styles.listCol}>\n                  {r?.general?.resumeName}\n                </div>\n                <div className=\"fl\" style={styles.listCol}>\n                  {r?.general?.title}\n                </div>\n                <div className=\"fl\" style={styles.listCol}>\n                  <Tooltip title=\"Edit\" placement=\"bottom\">\n                    <IconButton\n                      onClick={() => {\n                        editResume(i);\n                      }}\n                    >\n                      <Edit />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Delete\" placement=\"bottom\">\n                    <IconButton\n                      onClick={() => {\n                        deleteResume(i);\n                      }}\n                    >\n                      <Delete />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Download\" placement=\"bottom\">\n                    <IconButton\n                      onClick={() => {\n                        downloadResume(i);\n                      }}\n                    >\n                      <Download />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Change Template\" placement=\"bottom\">\n                    <IconButton\n                      onClick={() => {\n                        changeTemplate(i);\n                      }}\n                    >\n                      <Preview />\n                    </IconButton>\n                  </Tooltip>\n                </div>\n                <div className=\"clear\"></div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { ListResume } from \"../components/ListResume\";\nimport { ResumeService } from \"../services/ResumeService\";\n\nexport const ResumeFactory = () => {\n  const [resumes, setResumes] = useState([]);\n\n  const fetchResumes = () => {\n    const resumes = ResumeService.getResumes();\n    console.log(\"fetchResumes :: resumes  ::\", resumes);\n    setResumes(resumes);\n  };\n\n  // fetch resumes\n  useEffect((e) => {\n    fetchResumes();\n  }, []);\n\n  return (\n    <div className=\"main-cont\">\n      <ListResume resumes={resumes} fetchResumes={fetchResumes} />\n    </div>\n  );\n};\n","import logo from './logo.svg';\nimport './App.css';\nimport {Header} from './components/Header';\nimport {ResumeFactory} from './pages/ResumeFactory';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <ResumeFactory />\n    </>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}